(function(P,G){typeof exports=="object"&&typeof module<"u"?G(exports):typeof define=="function"&&define.amd?define(["exports"],G):(P=typeof globalThis<"u"?globalThis:P||self,G(P.OpenAIAgentsRealtime={}))})(this,function(P){"use strict";var Sc=Object.defineProperty;var ya=P=>{throw TypeError(P)};var Tc=(P,G,X)=>G in P?Sc(P,G,{enumerable:!0,configurable:!0,writable:!0,value:X}):P[G]=X;var _=(P,G,X)=>Tc(P,typeof G!="symbol"?G+"":G,X),Or=(P,G,X)=>G.has(P)||ya("Cannot "+X);var u=(P,G,X)=>(Or(P,G,"read from private field"),X?X.call(P):G.get(P)),k=(P,G,X)=>G.has(P)?ya("Cannot add the same private member more than once"):G instanceof WeakSet?G.add(P):G.set(P,X),y=(P,G,X,Et)=>(Or(P,G,"write to private field"),Et?Et.call(P,X):G.set(P,X),X),F=(P,G,X)=>(Or(P,G,"access private method"),X);var yt,qt,vt,Gt,Vt,wt,ae,Pe,Ue,Je,bt,ce,Er,Nr,Ot,pe,zt,Wt,Ht,Yt,rt,Be,qe,st,Xt,xt,je,re,at,Ln,wa,fe,Qt,St,be,Ge,Kt,en,tn,nn,Tt,ie,Rr,Dr,Pr,ba,jr,it,rn,he,sn,z,an,ot,on,ut,kt,ee,un,Me,ct,dt,Un,xa,B,Z,cn,M,It,At,dn,Y,ln,Ct,W,Jn,Bn,Sa,qn,Ta,Mr,ka;const G={version:"0.0.7"};function X(n){const e=atob(n),t=e.length,r=new Uint8Array(t);for(let s=0;s<t;s++)r[s]=e.charCodeAt(s);return r.buffer}function Et(n){const e=String.fromCharCode(...new Uint8Array(n));return btoa(e)}function Zr(n){if(typeof n>"u"||n===null||typeof n!="object"||!("type"in n)||typeof n.type!="string"||!n.type||n.type!=="message"||!("content"in n)||!Array.isArray(n.content)||n.content.length<1)return;const e=n.content[n.content.length-1];if(!(!("type"in e)||typeof e.type!="string")){if(e.type==="text")return typeof e.text=="string"?e.text:void 0;if(e.type==="audio")return typeof e.transcript=="string"?e.transcript:void 0}}function Ia(n,e){const t=n.filter(a=>!e.some(i=>i.itemId===a.itemId)),r=e.filter(a=>!n.some(i=>i.itemId===a.itemId)),s=e.filter(a=>n.some(i=>i.itemId===a.itemId&&JSON.stringify(i)!==JSON.stringify(a)));return{removals:t,additions:r,updates:s}}function Aa(){return typeof window>"u"?!1:typeof window.RTCPeerConnection<"u"}function $r(n){return n.role==="system"?n:n.role==="assistant"?{...n,content:n.content.map(e=>e.type==="audio"?{...e,audio:null}:e)}:n.role==="user"?{...n,content:n.content.map(e=>e.type==="input_audio"?{...e,audio:null}:e)}:n}function Ca(n,e,t){const r=!t&&e.type==="message"?$r(e):e,s=n.findIndex(a=>a.itemId===e.itemId);if(s!==-1)return n.map((a,i)=>i===s?r:!t&&a.type==="message"?$r(a):a);if(e.previousItemId){const a=n.findIndex(i=>i.itemId===e.previousItemId);return a!==-1?[...n.slice(0,a+1),r,...n.slice(a+1)]:[...n,r]}else return[...n,r]}const Oa={"User-Agent":`Agents/JavaScript ${G.version}`,"X-OpenAI-Agents-SDK":`openai-agents-sdk.${G.version}`},Ea=`openai-agents-sdk.${G.version}`;async function Gn(n){try{return[null,await n()]}catch(e){return[e,null]}}function Na(n,e){const t={...n};return Object.defineProperties(t,{$brand:{value:"auto-parseable-response-format",enumerable:!1},$parseRaw:{value:e,enumerable:!1}}),t}const Ra=Symbol("Let zodToJsonSchema decide on which parser to use"),Fr={name:void 0,$refStrategy:"root",effectStrategy:"input",pipeStrategy:"all",dateStrategy:"format:date-time",mapStrategy:"entries",nullableStrategy:"from-target",removeAdditionalStrategy:"passthrough",definitionPath:"definitions",target:"jsonSchema7",strictUnions:!1,errorMessages:!1,markdownDescription:!1,patternStrategy:"escape",applyRegexFlags:!1,emailStrategy:"format:email",base64Strategy:"contentEncoding:base64",nameStrategy:"ref"},Da=n=>typeof n=="string"?{...Fr,basePath:["#"],definitions:{},name:n}:{...Fr,basePath:["#"],definitions:{},...n},Vn=n=>"_def"in n?n._def:n;function Pa(n){if(!n)return!0;for(const e in n)return!1;return!0}const ja=n=>{const e=Da(n),t=e.name!==void 0?[...e.basePath,e.definitionPath,e.name]:e.basePath;return{...e,currentPath:t,propertyPath:void 0,seenRefs:new Set,seen:new Map(Object.entries(e.definitions).map(([r,s])=>[Vn(s),{def:Vn(s),path:[...e.basePath,e.definitionPath,r],jsonSchema:void 0}]))}};function Lr(n,e,t,r){r!=null&&r.errorMessages&&t&&(n.errorMessage={...n.errorMessage,[e]:t})}function V(n,e,t,r,s){n[e]=t,Lr(n,e,r,s)}var Nt;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(Nt||(Nt={}));var Ur;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(Ur||(Ur={})),Nt.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),Nt.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);let Jr=class va extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const p=i.path[c];c===i.path.length-1?(o[p]=o[p]||{_errors:[]},o[p]._errors.push(t(i))):o[p]=o[p]||{_errors:[]},o=o[p],c++}}};return s(this),r}static assert(e){if(!(e instanceof va))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,Nt.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}};Jr.create=n=>new Jr(n);var Br;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(Br||(Br={}));var D;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(D||(D={}));function Ma(){return{}}function Za(n,e){var r,s;const t={type:"array"};return((s=(r=n.type)==null?void 0:r._def)==null?void 0:s.typeName)!==D.ZodAny&&(t.items=U(n.type._def,{...e,currentPath:[...e.currentPath,"items"]})),n.minLength&&V(t,"minItems",n.minLength.value,n.minLength.message,e),n.maxLength&&V(t,"maxItems",n.maxLength.value,n.maxLength.message,e),n.exactLength&&(V(t,"minItems",n.exactLength.value,n.exactLength.message,e),V(t,"maxItems",n.exactLength.value,n.exactLength.message,e)),t}function $a(n,e){const t={type:"integer",format:"int64"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function Fa(){return{type:"boolean"}}function La(n,e){return U(n.type._def,e)}const Ua=(n,e)=>U(n.innerType._def,e);function qr(n,e,t){const r=t??e.dateStrategy;if(Array.isArray(r))return{anyOf:r.map((s,a)=>qr(n,e,s))};switch(r){case"string":case"format:date-time":return{type:"string",format:"date-time"};case"format:date":return{type:"string",format:"date"};case"integer":return Ja(n,e)}}const Ja=(n,e)=>{const t={type:"integer",format:"unix-time"};if(e.target==="openApi3")return t;for(const r of n.checks)switch(r.kind){case"min":V(t,"minimum",r.value,r.message,e);break;case"max":V(t,"maximum",r.value,r.message,e);break}return t};function Ba(n,e){return{...U(n.innerType._def,e),default:n.defaultValue()}}function qa(n,e,t){return e.effectStrategy==="input"?U(n.schema._def,e,t):{}}function Ga(n){return{type:"string",enum:[...n.values]}}const Va=n=>"type"in n&&n.type==="string"?!1:"allOf"in n;function za(n,e){const t=[U(n.left._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),U(n.right._def,{...e,currentPath:[...e.currentPath,"allOf","1"]})].filter(a=>!!a);let r=e.target==="jsonSchema2019-09"?{unevaluatedProperties:!1}:void 0;const s=[];return t.forEach(a=>{if(Va(a))s.push(...a.allOf),a.unevaluatedProperties===void 0&&(r=void 0);else{let i=a;if("additionalProperties"in a&&a.additionalProperties===!1){const{additionalProperties:o,...c}=a;i=c}else r=void 0;s.push(i)}}),s.length?{allOf:s,...r}:void 0}function Wa(n,e){const t=typeof n.value;return t!=="bigint"&&t!=="number"&&t!=="boolean"&&t!=="string"?{type:Array.isArray(n.value)?"array":"object"}:e.target==="openApi3"?{type:t==="bigint"?"integer":t,enum:[n.value]}:{type:t==="bigint"?"integer":t,const:n.value}}let zn;const Ve={cuid:/^[cC][^\s-]{8,}$/,cuid2:/^[0-9a-z]+$/,ulid:/^[0-9A-HJKMNP-TV-Z]{26}$/,email:/^(?!\.)(?!.*\.\.)([a-zA-Z0-9_'+\-\.]*)[a-zA-Z0-9_+-]@([a-zA-Z0-9][a-zA-Z0-9\-]*\.)+[a-zA-Z]{2,}$/,emoji:()=>(zn===void 0&&(zn=RegExp("^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$","u")),zn),base64:/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,nanoid:/^[a-zA-Z0-9_-]{21}$/};function Gr(n,e){const t={type:"string"};function r(s){return e.patternStrategy==="escape"?Ha(s):s}if(n.checks)for(const s of n.checks)switch(s.kind){case"min":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e);break;case"max":V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"email":switch(e.emailStrategy){case"format:email":ye(t,"email",s.message,e);break;case"format:idn-email":ye(t,"idn-email",s.message,e);break;case"pattern:zod":ve(t,Ve.email,s.message,e);break}break;case"url":ye(t,"uri",s.message,e);break;case"uuid":ye(t,"uuid",s.message,e);break;case"regex":ve(t,s.regex,s.message,e);break;case"cuid":ve(t,Ve.cuid,s.message,e);break;case"cuid2":ve(t,Ve.cuid2,s.message,e);break;case"startsWith":ve(t,RegExp(`^${r(s.value)}`),s.message,e);break;case"endsWith":ve(t,RegExp(`${r(s.value)}$`),s.message,e);break;case"datetime":ye(t,"date-time",s.message,e);break;case"date":ye(t,"date",s.message,e);break;case"time":ye(t,"time",s.message,e);break;case"duration":ye(t,"duration",s.message,e);break;case"length":V(t,"minLength",typeof t.minLength=="number"?Math.max(t.minLength,s.value):s.value,s.message,e),V(t,"maxLength",typeof t.maxLength=="number"?Math.min(t.maxLength,s.value):s.value,s.message,e);break;case"includes":{ve(t,RegExp(r(s.value)),s.message,e);break}case"ip":{s.version!=="v6"&&ye(t,"ipv4",s.message,e),s.version!=="v4"&&ye(t,"ipv6",s.message,e);break}case"emoji":ve(t,Ve.emoji,s.message,e);break;case"ulid":{ve(t,Ve.ulid,s.message,e);break}case"base64":{switch(e.base64Strategy){case"format:binary":{ye(t,"binary",s.message,e);break}case"contentEncoding:base64":{V(t,"contentEncoding","base64",s.message,e);break}case"pattern:zod":{ve(t,Ve.base64,s.message,e);break}}break}case"nanoid":ve(t,Ve.nanoid,s.message,e)}return t}const Ha=n=>Array.from(n).map(e=>/[a-zA-Z0-9]/.test(e)?e:`\\${e}`).join(""),ye=(n,e,t,r)=>{var s;n.format||(s=n.anyOf)!=null&&s.some(a=>a.format)?(n.anyOf||(n.anyOf=[]),n.format&&(n.anyOf.push({format:n.format,...n.errorMessage&&r.errorMessages&&{errorMessage:{format:n.errorMessage.format}}}),delete n.format,n.errorMessage&&(delete n.errorMessage.format,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.anyOf.push({format:e,...t&&r.errorMessages&&{errorMessage:{format:t}}})):V(n,"format",e,t,r)},ve=(n,e,t,r)=>{var s;n.pattern||(s=n.allOf)!=null&&s.some(a=>a.pattern)?(n.allOf||(n.allOf=[]),n.pattern&&(n.allOf.push({pattern:n.pattern,...n.errorMessage&&r.errorMessages&&{errorMessage:{pattern:n.errorMessage.pattern}}}),delete n.pattern,n.errorMessage&&(delete n.errorMessage.pattern,Object.keys(n.errorMessage).length===0&&delete n.errorMessage)),n.allOf.push({pattern:Vr(e,r),...t&&r.errorMessages&&{errorMessage:{pattern:t}}})):V(n,"pattern",Vr(e,r),t,r)},Vr=(n,e)=>{var p;const t=typeof n=="function"?n():n;if(!e.applyRegexFlags||!t.flags)return t.source;const r={i:t.flags.includes("i"),m:t.flags.includes("m"),s:t.flags.includes("s")},s=r.i?t.source.toLowerCase():t.source;let a="",i=!1,o=!1,c=!1;for(let l=0;l<s.length;l++){if(i){a+=s[l],i=!1;continue}if(r.i){if(o){if(s[l].match(/[a-z]/)){c?(a+=s[l],a+=`${s[l-2]}-${s[l]}`.toUpperCase(),c=!1):s[l+1]==="-"&&((p=s[l+2])!=null&&p.match(/[a-z]/))?(a+=s[l],c=!0):a+=`${s[l]}${s[l].toUpperCase()}`;continue}}else if(s[l].match(/[a-z]/)){a+=`[${s[l]}${s[l].toUpperCase()}]`;continue}}if(r.m){if(s[l]==="^"){a+=`(^|(?<=[\r
]))`;continue}else if(s[l]==="$"){a+=`($|(?=[\r
]))`;continue}}if(r.s&&s[l]==="."){a+=o?`${s[l]}\r
`:`[${s[l]}\r
]`;continue}a+=s[l],s[l]==="\\"?i=!0:o&&s[l]==="]"?o=!1:!o&&s[l]==="["&&(o=!0)}try{const l=new RegExp(a)}catch{return console.warn(`Could not convert regex pattern at ${e.currentPath.join("/")} to a flag-independent form! Falling back to the flag-ignorant source`),t.source}return a};function zr(n,e){var r,s,a,i;if(e.target==="openApi3"&&((r=n.keyType)==null?void 0:r._def.typeName)===D.ZodEnum)return{type:"object",required:n.keyType._def.values,properties:n.keyType._def.values.reduce((o,c)=>({...o,[c]:U(n.valueType._def,{...e,currentPath:[...e.currentPath,"properties",c]})??{}}),{}),additionalProperties:!1};const t={type:"object",additionalProperties:U(n.valueType._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??{}};if(e.target==="openApi3")return t;if(((s=n.keyType)==null?void 0:s._def.typeName)===D.ZodString&&((a=n.keyType._def.checks)!=null&&a.length)){const o=Object.entries(Gr(n.keyType._def,e)).reduce((c,[p,l])=>p==="type"?c:{...c,[p]:l},{});return{...t,propertyNames:o}}else if(((i=n.keyType)==null?void 0:i._def.typeName)===D.ZodEnum)return{...t,propertyNames:{enum:n.keyType._def.values}};return t}function Ya(n,e){if(e.mapStrategy==="record")return zr(n,e);const t=U(n.keyType._def,{...e,currentPath:[...e.currentPath,"items","items","0"]})||{},r=U(n.valueType._def,{...e,currentPath:[...e.currentPath,"items","items","1"]})||{};return{type:"array",maxItems:125,items:{type:"array",items:[t,r],minItems:2,maxItems:2}}}function Xa(n){const e=n.values,r=Object.keys(n.values).filter(a=>typeof e[e[a]]!="number").map(a=>e[a]),s=Array.from(new Set(r.map(a=>typeof a)));return{type:s.length===1?s[0]==="string"?"string":"number":["string","number"],enum:r}}function Qa(){return{not:{}}}function Ka(n){return n.target==="openApi3"?{enum:["null"],nullable:!0}:{type:"null"}}const fn={ZodString:"string",ZodNumber:"number",ZodBigInt:"integer",ZodBoolean:"boolean",ZodNull:"null"};function ei(n,e){if(e.target==="openApi3")return Wr(n,e);const t=n.options instanceof Map?Array.from(n.options.values()):n.options;if(t.every(r=>r._def.typeName in fn&&(!r._def.checks||!r._def.checks.length))){const r=t.reduce((s,a)=>{const i=fn[a._def.typeName];return i&&!s.includes(i)?[...s,i]:s},[]);return{type:r.length>1?r:r[0]}}else if(t.every(r=>r._def.typeName==="ZodLiteral"&&!r.description)){const r=t.reduce((s,a)=>{const i=typeof a._def.value;switch(i){case"string":case"number":case"boolean":return[...s,i];case"bigint":return[...s,"integer"];case"object":if(a._def.value===null)return[...s,"null"];case"symbol":case"undefined":case"function":default:return s}},[]);if(r.length===t.length){const s=r.filter((a,i,o)=>o.indexOf(a)===i);return{type:s.length>1?s:s[0],enum:t.reduce((a,i)=>a.includes(i._def.value)?a:[...a,i._def.value],[])}}}else if(t.every(r=>r._def.typeName==="ZodEnum"))return{type:"string",enum:t.reduce((r,s)=>[...r,...s._def.values.filter(a=>!r.includes(a))],[])};return Wr(n,e)}const Wr=(n,e)=>{const t=(n.options instanceof Map?Array.from(n.options.values()):n.options).map((r,s)=>U(r._def,{...e,currentPath:[...e.currentPath,"anyOf",`${s}`]})).filter(r=>!!r&&(!e.strictUnions||typeof r=="object"&&Object.keys(r).length>0));return t.length?{anyOf:t}:void 0};function ti(n,e){if(["ZodString","ZodNumber","ZodBigInt","ZodBoolean","ZodNull"].includes(n.innerType._def.typeName)&&(!n.innerType._def.checks||!n.innerType._def.checks.length))return e.target==="openApi3"||e.nullableStrategy==="property"?{type:fn[n.innerType._def.typeName],nullable:!0}:{type:[fn[n.innerType._def.typeName],"null"]};if(e.target==="openApi3"){const r=U(n.innerType._def,{...e,currentPath:[...e.currentPath]});return r&&"$ref"in r?{allOf:[r],nullable:!0}:r&&{...r,nullable:!0}}const t=U(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","0"]});return t&&{anyOf:[t,{type:"null"}]}}function ni(n,e){const t={type:"number"};if(!n.checks)return t;for(const r of n.checks)switch(r.kind){case"int":t.type="integer",Lr(t,"type",r.message,e);break;case"min":e.target==="jsonSchema7"?r.inclusive?V(t,"minimum",r.value,r.message,e):V(t,"exclusiveMinimum",r.value,r.message,e):(r.inclusive||(t.exclusiveMinimum=!0),V(t,"minimum",r.value,r.message,e));break;case"max":e.target==="jsonSchema7"?r.inclusive?V(t,"maximum",r.value,r.message,e):V(t,"exclusiveMaximum",r.value,r.message,e):(r.inclusive||(t.exclusiveMaximum=!0),V(t,"maximum",r.value,r.message,e));break;case"multipleOf":V(t,"multipleOf",r.value,r.message,e);break}return t}function ri(n,e){return e.removeAdditionalStrategy==="strict"?n.catchall._def.typeName==="ZodNever"?n.unknownKeys!=="strict":U(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0:n.catchall._def.typeName==="ZodNever"?n.unknownKeys==="passthrough":U(n.catchall._def,{...e,currentPath:[...e.currentPath,"additionalProperties"]})??!0}function si(n,e){const t={type:"object",...Object.entries(n.shape()).reduce((r,[s,a])=>{var c;if(a===void 0||a._def===void 0)return r;const i=[...e.currentPath,"properties",s],o=U(a._def,{...e,currentPath:i,propertyPath:i});if(o===void 0)return r;if(e.openaiStrictMode&&a.isOptional()&&!a.isNullable()&&typeof((c=a._def)==null?void 0:c.defaultValue)>"u")throw new Error(`Zod field at \`${i.join("/")}\` uses \`.optional()\` without \`.nullable()\` which is not supported by the API. See: https://platform.openai.com/docs/guides/structured-outputs?api-mode=responses#all-fields-must-be-required`);return{properties:{...r.properties,[s]:o},required:a.isOptional()&&!e.openaiStrictMode?r.required:[...r.required,s]}},{properties:{},required:[]}),additionalProperties:ri(n,e)};return t.required.length||delete t.required,t}const ai=(n,e)=>{var r;if(e.currentPath.toString()===((r=e.propertyPath)==null?void 0:r.toString()))return U(n.innerType._def,e);const t=U(n.innerType._def,{...e,currentPath:[...e.currentPath,"anyOf","1"]});return t?{anyOf:[{not:{}},t]}:{}},ii=(n,e)=>{if(e.pipeStrategy==="input")return U(n.in._def,e);if(e.pipeStrategy==="output")return U(n.out._def,e);const t=U(n.in._def,{...e,currentPath:[...e.currentPath,"allOf","0"]}),r=U(n.out._def,{...e,currentPath:[...e.currentPath,"allOf",t?"1":"0"]});return{allOf:[t,r].filter(s=>s!==void 0)}};function oi(n,e){return U(n.type._def,e)}function ui(n,e){const r={type:"array",uniqueItems:!0,items:U(n.valueType._def,{...e,currentPath:[...e.currentPath,"items"]})};return n.minSize&&V(r,"minItems",n.minSize.value,n.minSize.message,e),n.maxSize&&V(r,"maxItems",n.maxSize.value,n.maxSize.message,e),r}function ci(n,e){return n.rest?{type:"array",minItems:n.items.length,items:n.items.map((t,r)=>U(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[]),additionalItems:U(n.rest._def,{...e,currentPath:[...e.currentPath,"additionalItems"]})}:{type:"array",minItems:n.items.length,maxItems:n.items.length,items:n.items.map((t,r)=>U(t._def,{...e,currentPath:[...e.currentPath,"items",`${r}`]})).reduce((t,r)=>r===void 0?t:[...t,r],[])}}function di(){return{not:{}}}function li(){return{}}const pi=(n,e)=>U(n.innerType._def,e);function U(n,e,t=!1){var i;const r=e.seen.get(n);if(e.override){const o=(i=e.override)==null?void 0:i.call(e,n,e,r,t);if(o!==Ra)return o}if(r&&!t){const o=fi(r,e);if(o!==void 0)return"$ref"in o&&e.seenRefs.add(o.$ref),o}const s={def:n,path:e.currentPath,jsonSchema:void 0};e.seen.set(n,s);const a=mi(n,n.typeName,e,t);return a&&gi(n,e,a),s.jsonSchema=a,a}const fi=(n,e)=>{switch(e.$refStrategy){case"root":return{$ref:n.path.join("/")};case"extract-to-root":const t=n.path.slice(e.basePath.length+1).join("_");return t!==e.name&&e.nameStrategy==="duplicate-ref"&&(e.definitions[t]=n.def),{$ref:[...e.basePath,e.definitionPath,t].join("/")};case"relative":return{$ref:hi(e.currentPath,n.path)};case"none":case"seen":return n.path.length<e.currentPath.length&&n.path.every((r,s)=>e.currentPath[s]===r)?(console.warn(`Recursive reference detected at ${e.currentPath.join("/")}! Defaulting to any`),{}):e.$refStrategy==="seen"?{}:void 0}},hi=(n,e)=>{let t=0;for(;t<n.length&&t<e.length&&n[t]===e[t];t++);return[(n.length-t).toString(),...e.slice(t)].join("/")},mi=(n,e,t,r)=>{switch(e){case D.ZodString:return Gr(n,t);case D.ZodNumber:return ni(n,t);case D.ZodObject:return si(n,t);case D.ZodBigInt:return $a(n,t);case D.ZodBoolean:return Fa();case D.ZodDate:return qr(n,t);case D.ZodUndefined:return di();case D.ZodNull:return Ka(t);case D.ZodArray:return Za(n,t);case D.ZodUnion:case D.ZodDiscriminatedUnion:return ei(n,t);case D.ZodIntersection:return za(n,t);case D.ZodTuple:return ci(n,t);case D.ZodRecord:return zr(n,t);case D.ZodLiteral:return Wa(n,t);case D.ZodEnum:return Ga(n);case D.ZodNativeEnum:return Xa(n);case D.ZodNullable:return ti(n,t);case D.ZodOptional:return ai(n,t);case D.ZodMap:return Ya(n,t);case D.ZodSet:return ui(n,t);case D.ZodLazy:return U(n.getter()._def,t);case D.ZodPromise:return oi(n,t);case D.ZodNaN:case D.ZodNever:return Qa();case D.ZodEffects:return qa(n,t,r);case D.ZodAny:return Ma();case D.ZodUnknown:return li();case D.ZodDefault:return Ba(n,t);case D.ZodBranded:return La(n,t);case D.ZodReadonly:return pi(n,t);case D.ZodCatch:return Ua(n,t);case D.ZodPipeline:return ii(n,t);case D.ZodFunction:case D.ZodVoid:case D.ZodSymbol:return;default:return(s=>{})()}},gi=(n,e,t)=>(n.description&&(t.description=n.description,e.markdownDescription&&(t.markdownDescription=n.description)),t),_i=(n,e)=>{const t=ja(e),r=typeof e=="string"?e:(e==null?void 0:e.nameStrategy)==="title"||e==null?void 0:e.name,s=U(n._def,r===void 0?t:{...t,currentPath:[...t.basePath,t.definitionPath,r]},!1)??{},a=typeof e=="object"&&e.name!==void 0&&e.nameStrategy==="title"?e.name:void 0;a!==void 0&&(s.title=a);const i=(()=>{if(Pa(t.definitions))return;const c={},p=new Set;for(let l=0;l<500;l++){const f=Object.entries(t.definitions).filter(([m])=>!p.has(m));if(f.length===0)break;for(const[m,T]of f)c[m]=U(Vn(T),{...t,currentPath:[...t.basePath,t.definitionPath,m]},!0)??{},p.add(m)}return c})(),o=r===void 0?i?{...s,[t.definitionPath]:i}:s:t.nameStrategy==="duplicate-ref"?{...s,...i||t.seenRefs.size?{[t.definitionPath]:{...i,...t.seenRefs.size?{[r]:s}:void 0}}:void 0}:{$ref:[...t.$refStrategy==="relative"?[]:t.basePath,t.definitionPath,r].join("/"),[t.definitionPath]:{...i,[r]:s}};return t.target==="jsonSchema7"?o.$schema="http://json-schema.org/draft-07/schema#":t.target==="jsonSchema2019-09"&&(o.$schema="https://json-schema.org/draft/2019-09/schema#"),o};function yi(n,{parser:e,callback:t}){const r={...n};return Object.defineProperties(r,{$brand:{value:"auto-parseable-tool",enumerable:!1},$parseRaw:{value:e,enumerable:!1},$callback:{value:t,enumerable:!1}}),r}function Hr(n,e){return _i(n,{openaiStrictMode:!0,name:e.name,nameStrategy:"duplicate-ref",$refStrategy:"extract-to-root",nullableStrategy:"property"})}function vi(n,e,t){return Na({type:"json_schema",...t,name:e,strict:!0,schema:Hr(n,{name:e})},r=>n.parse(JSON.parse(r)))}function wi(n){return yi({type:"function",name:n.name,parameters:Hr(n.parameters,{name:n.name}),strict:!0},{callback:n.function,parser:e=>n.parameters.parse(JSON.parse(e))})}class Ze extends Error{constructor(t,r){super(t);_(this,"state");this.state=r}}class bi extends Ze{}class Yr extends Ze{}class de extends Ze{}class K extends Ze{}class Xr extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class xi extends Ze{constructor(t,r,s){super(t,s);_(this,"error");this.error=r}}class Qr extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}class hn extends Ze{constructor(t,r,s){super(t,s);_(this,"result");this.result=r}}function ze(n){return typeof n=="object"&&n!==null&&"_def"in n&&typeof n._def=="object"&&n._def!==null&&"typeName"in n._def&&n._def.typeName==="ZodObject"}function Si(n){return typeof n=="object"&&n!==null&&"input"in n&&typeof n.input=="string"}function mn(n){if(n=n.replace(/\s/g,"_"),n=n.replace(/[^a-zA-Z0-9]/g,"_"),n.length===0)throw new Error("Tool name cannot be empty");return n}function Wn(n,e){const t=r=>JSON.parse(r);if(ze(n)){const r=wi({name:e,parameters:n,function:()=>{}});return{schema:r.parameters,parser:r.$parseRaw}}else if(typeof n=="object"&&n!==null)return{schema:n,parser:t};throw new K("Input type is not a ZodObject or a valid JSON schema")}function Kr(n){if(n==="text")return"text";if(ze(n)){const e=vi(n,"output");return{type:e.type,name:e.name,strict:e.strict||!1,schema:e.schema}}return n}function Ti(n){return n&&n.__esModule&&Object.prototype.hasOwnProperty.call(n,"default")?n.default:n}var gn={exports:{}},Hn,es;function ki(){if(es)return Hn;es=1;var n=1e3,e=n*60,t=e*60,r=t*24,s=r*7,a=r*365.25;Hn=function(l,f){f=f||{};var m=typeof l;if(m==="string"&&l.length>0)return i(l);if(m==="number"&&isFinite(l))return f.long?c(l):o(l);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(l))};function i(l){if(l=String(l),!(l.length>100)){var f=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(l);if(f){var m=parseFloat(f[1]),T=(f[2]||"ms").toLowerCase();switch(T){case"years":case"year":case"yrs":case"yr":case"y":return m*a;case"weeks":case"week":case"w":return m*s;case"days":case"day":case"d":return m*r;case"hours":case"hour":case"hrs":case"hr":case"h":return m*t;case"minutes":case"minute":case"mins":case"min":case"m":return m*e;case"seconds":case"second":case"secs":case"sec":case"s":return m*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return m;default:return}}}}function o(l){var f=Math.abs(l);return f>=r?Math.round(l/r)+"d":f>=t?Math.round(l/t)+"h":f>=e?Math.round(l/e)+"m":f>=n?Math.round(l/n)+"s":l+"ms"}function c(l){var f=Math.abs(l);return f>=r?p(l,f,r,"day"):f>=t?p(l,f,t,"hour"):f>=e?p(l,f,e,"minute"):f>=n?p(l,f,n,"second"):l+" ms"}function p(l,f,m,T){var w=f>=m*1.5;return Math.round(l/m)+" "+T+(w?"s":"")}return Hn}var Yn,ts;function Ii(){if(ts)return Yn;ts=1;function n(e){r.debug=r,r.default=r,r.coerce=p,r.disable=o,r.enable=a,r.enabled=c,r.humanize=ki(),r.destroy=l,Object.keys(e).forEach(f=>{r[f]=e[f]}),r.names=[],r.skips=[],r.formatters={};function t(f){let m=0;for(let T=0;T<f.length;T++)m=(m<<5)-m+f.charCodeAt(T),m|=0;return r.colors[Math.abs(m)%r.colors.length]}r.selectColor=t;function r(f){let m,T=null,w,b;function O(...R){if(!O.enabled)return;const H=O,te=Number(new Date),me=te-(m||te);H.diff=me,H.prev=m,H.curr=te,m=te,R[0]=r.coerce(R[0]),typeof R[0]!="string"&&R.unshift("%O");let ge=0;R[0]=R[0].replace(/%([a-zA-Z%])/g,(Cr,bc)=>{if(Cr==="%%")return"%";ge++;const _a=r.formatters[bc];if(typeof _a=="function"){const xc=R[ge];Cr=_a.call(H,xc),R.splice(ge,1),ge--}return Cr}),r.formatArgs.call(H,R),(H.log||r.log).apply(H,R)}return O.namespace=f,O.useColors=r.useColors(),O.color=r.selectColor(f),O.extend=s,O.destroy=r.destroy,Object.defineProperty(O,"enabled",{enumerable:!0,configurable:!1,get:()=>T!==null?T:(w!==r.namespaces&&(w=r.namespaces,b=r.enabled(f)),b),set:R=>{T=R}}),typeof r.init=="function"&&r.init(O),O}function s(f,m){const T=r(this.namespace+(typeof m>"u"?":":m)+f);return T.log=this.log,T}function a(f){r.save(f),r.namespaces=f,r.names=[],r.skips=[];const m=(typeof f=="string"?f:"").trim().replace(" ",",").split(",").filter(Boolean);for(const T of m)T[0]==="-"?r.skips.push(T.slice(1)):r.names.push(T)}function i(f,m){let T=0,w=0,b=-1,O=0;for(;T<f.length;)if(w<m.length&&(m[w]===f[T]||m[w]==="*"))m[w]==="*"?(b=w,O=T,w++):(T++,w++);else if(b!==-1)w=b+1,O++,T=O;else return!1;for(;w<m.length&&m[w]==="*";)w++;return w===m.length}function o(){const f=[...r.names,...r.skips.map(m=>"-"+m)].join(",");return r.enable(""),f}function c(f){for(const m of r.skips)if(i(f,m))return!1;for(const m of r.names)if(i(f,m))return!0;return!1}function p(f){return f instanceof Error?f.stack||f.message:f}function l(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")}return r.enable(r.load()),r}return Yn=n,Yn}var ns;function Ai(){return ns||(ns=1,function(n,e){e.formatArgs=r,e.save=s,e.load=a,e.useColors=t,e.storage=i(),e.destroy=(()=>{let c=!1;return()=>{c||(c=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"];function t(){if(typeof window<"u"&&window.process&&(window.process.type==="renderer"||window.process.__nwjs))return!0;if(typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))return!1;let c;return typeof document<"u"&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||typeof window<"u"&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||typeof navigator<"u"&&navigator.userAgent&&(c=navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/))&&parseInt(c[1],10)>=31||typeof navigator<"u"&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)}function r(c){if(c[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+c[0]+(this.useColors?"%c ":" ")+"+"+n.exports.humanize(this.diff),!this.useColors)return;const p="color: "+this.color;c.splice(1,0,p,"color: inherit");let l=0,f=0;c[0].replace(/%[a-zA-Z%]/g,m=>{m!=="%%"&&(l++,m==="%c"&&(f=l))}),c.splice(f,0,p)}e.log=console.debug||console.log||(()=>{});function s(c){try{c?e.storage.setItem("debug",c):e.storage.removeItem("debug")}catch{}}function a(){let c;try{c=e.storage.getItem("debug")}catch{}return!c&&typeof process<"u"&&"env"in process&&(c=process.env.DEBUG),c}function i(){try{return localStorage}catch{}}n.exports=Ii()(e);const{formatters:o}=n.exports;o.j=function(c){try{return JSON.stringify(c)}catch(p){return"[UnexpectedJSONParseError]: "+p.message}}}(gn,gn.exports)),gn.exports}var Ci=Ai();const Oi=Ti(Ci);function Ei(){return po()}function rs(n){const e=Ei();return typeof e<"u"&&(e[n]==="true"||e[n]==="1")}const ss={get disabled(){return!0}},as={get dontLogModelData(){return rs("OPENAI_AGENTS_DONT_LOG_MODEL_DATA")},get dontLogToolData(){return rs("OPENAI_AGENTS_DONT_LOG_TOOL_DATA")}},Ni=as.dontLogModelData,Ri=as.dontLogToolData;function is(n="openai-agents"){return{namespace:n,debug:Oi(n),error:console.error,warn:console.warn,dontLogModelData:Ni,dontLogToolData:Ri}}const C=is("openai-agents:core");function We(n){if(n==null)return String(n);if(typeof n=="string")return n;if(typeof n=="object")try{return JSON.stringify(n)}catch{return"[object with circular references]"}return String(n)}function Di(n,e){return`An error occurred while running the tool. Please try again. Error: ${e instanceof Error?e.toString():String(e)}`}function _n(n){const e=n.name?mn(n.name):mn(n.execute.name),t=typeof n.errorFunction>"u"?Di:n.errorFunction;if(!e)throw new Error("Tool name cannot be empty. Either name your function or provide a name in the options.");const r=n.strict??!0;if(!r&&ze(n.parameters))throw new K("Strict mode is required for Zod parameters");const{parser:s,schema:a}=Wn(n.parameters,e);async function i(p,l){const[f,m]=await Gn(()=>s(l));if(f!==null)throw C.dontLogToolData?C.debug(`Invalid JSON input for tool ${e}`):C.debug(`Invalid JSON input for tool ${e}: ${l}`),new de("Invalid JSON input for tool");C.dontLogToolData?C.debug(`Invoking tool ${e}`):C.debug(`Invoking tool ${e} with input ${l}`);const T=await n.execute(m,p),w=We(T);return C.dontLogToolData?C.debug(`Tool ${e} completed`):C.debug(`Tool ${e} returned: ${w}`),T}async function o(p,l){return i(p,l).catch(f=>{if(t){const m=Zt();return m==null||m.setError({message:"Error running tool (non-fatal)",data:{tool_name:e,error:f.toString()}}),t(p,f)}throw f})}const c=typeof n.needsApproval=="function"?n.needsApproval:async()=>typeof n.needsApproval=="boolean"?n.needsApproval:!1;return{type:"function",name:e,description:n.description,parameters:a,strict:r,invoke:o,needsApproval:c}}var L;(function(n){n.assertEqual=s=>{};function e(s){}n.assertIs=e;function t(s){throw new Error}n.assertNever=t,n.arrayToEnum=s=>{const a={};for(const i of s)a[i]=i;return a},n.getValidEnumValues=s=>{const a=n.objectKeys(s).filter(o=>typeof s[s[o]]!="number"),i={};for(const o of a)i[o]=s[o];return n.objectValues(i)},n.objectValues=s=>n.objectKeys(s).map(function(a){return s[a]}),n.objectKeys=typeof Object.keys=="function"?s=>Object.keys(s):s=>{const a=[];for(const i in s)Object.prototype.hasOwnProperty.call(s,i)&&a.push(i);return a},n.find=(s,a)=>{for(const i of s)if(a(i))return i},n.isInteger=typeof Number.isInteger=="function"?s=>Number.isInteger(s):s=>typeof s=="number"&&Number.isFinite(s)&&Math.floor(s)===s;function r(s,a=" | "){return s.map(i=>typeof i=="string"?`'${i}'`:i).join(a)}n.joinValues=r,n.jsonStringifyReplacer=(s,a)=>typeof a=="bigint"?a.toString():a})(L||(L={}));var os;(function(n){n.mergeShapes=(e,t)=>({...e,...t})})(os||(os={}));const S=L.arrayToEnum(["string","nan","number","integer","float","boolean","date","bigint","symbol","function","undefined","null","array","object","unknown","promise","void","never","map","set"]),$e=n=>{switch(typeof n){case"undefined":return S.undefined;case"string":return S.string;case"number":return Number.isNaN(n)?S.nan:S.number;case"boolean":return S.boolean;case"function":return S.function;case"bigint":return S.bigint;case"symbol":return S.symbol;case"object":return Array.isArray(n)?S.array:n===null?S.null:n.then&&typeof n.then=="function"&&n.catch&&typeof n.catch=="function"?S.promise:typeof Map<"u"&&n instanceof Map?S.map:typeof Set<"u"&&n instanceof Set?S.set:typeof Date<"u"&&n instanceof Date?S.date:S.object;default:return S.unknown}},v=L.arrayToEnum(["invalid_type","invalid_literal","custom","invalid_union","invalid_union_discriminator","invalid_enum_value","unrecognized_keys","invalid_arguments","invalid_return_type","invalid_date","invalid_string","too_small","too_big","invalid_intersection_types","not_multiple_of","not_finite"]);class Ce extends Error{get errors(){return this.issues}constructor(e){super(),this.issues=[],this.addIssue=r=>{this.issues=[...this.issues,r]},this.addIssues=(r=[])=>{this.issues=[...this.issues,...r]};const t=new.target.prototype;Object.setPrototypeOf?Object.setPrototypeOf(this,t):this.__proto__=t,this.name="ZodError",this.issues=e}format(e){const t=e||function(a){return a.message},r={_errors:[]},s=a=>{for(const i of a.issues)if(i.code==="invalid_union")i.unionErrors.map(s);else if(i.code==="invalid_return_type")s(i.returnTypeError);else if(i.code==="invalid_arguments")s(i.argumentsError);else if(i.path.length===0)r._errors.push(t(i));else{let o=r,c=0;for(;c<i.path.length;){const p=i.path[c];c===i.path.length-1?(o[p]=o[p]||{_errors:[]},o[p]._errors.push(t(i))):o[p]=o[p]||{_errors:[]},o=o[p],c++}}};return s(this),r}static assert(e){if(!(e instanceof Ce))throw new Error(`Not a ZodError: ${e}`)}toString(){return this.message}get message(){return JSON.stringify(this.issues,L.jsonStringifyReplacer,2)}get isEmpty(){return this.issues.length===0}flatten(e=t=>t.message){const t={},r=[];for(const s of this.issues)s.path.length>0?(t[s.path[0]]=t[s.path[0]]||[],t[s.path[0]].push(e(s))):r.push(e(s));return{formErrors:r,fieldErrors:t}}get formErrors(){return this.flatten()}}Ce.create=n=>new Ce(n);const Xn=(n,e)=>{let t;switch(n.code){case v.invalid_type:n.received===S.undefined?t="Required":t=`Expected ${n.expected}, received ${n.received}`;break;case v.invalid_literal:t=`Invalid literal value, expected ${JSON.stringify(n.expected,L.jsonStringifyReplacer)}`;break;case v.unrecognized_keys:t=`Unrecognized key(s) in object: ${L.joinValues(n.keys,", ")}`;break;case v.invalid_union:t="Invalid input";break;case v.invalid_union_discriminator:t=`Invalid discriminator value. Expected ${L.joinValues(n.options)}`;break;case v.invalid_enum_value:t=`Invalid enum value. Expected ${L.joinValues(n.options)}, received '${n.received}'`;break;case v.invalid_arguments:t="Invalid function arguments";break;case v.invalid_return_type:t="Invalid function return type";break;case v.invalid_date:t="Invalid date";break;case v.invalid_string:typeof n.validation=="object"?"includes"in n.validation?(t=`Invalid input: must include "${n.validation.includes}"`,typeof n.validation.position=="number"&&(t=`${t} at one or more positions greater than or equal to ${n.validation.position}`)):"startsWith"in n.validation?t=`Invalid input: must start with "${n.validation.startsWith}"`:"endsWith"in n.validation?t=`Invalid input: must end with "${n.validation.endsWith}"`:L.assertNever(n.validation):n.validation!=="regex"?t=`Invalid ${n.validation}`:t="Invalid";break;case v.too_small:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at least":"more than"} ${n.minimum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at least":"over"} ${n.minimum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${n.minimum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly equal to ":n.inclusive?"greater than or equal to ":"greater than "}${new Date(Number(n.minimum))}`:t="Invalid input";break;case v.too_big:n.type==="array"?t=`Array must contain ${n.exact?"exactly":n.inclusive?"at most":"less than"} ${n.maximum} element(s)`:n.type==="string"?t=`String must contain ${n.exact?"exactly":n.inclusive?"at most":"under"} ${n.maximum} character(s)`:n.type==="number"?t=`Number must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="bigint"?t=`BigInt must be ${n.exact?"exactly":n.inclusive?"less than or equal to":"less than"} ${n.maximum}`:n.type==="date"?t=`Date must be ${n.exact?"exactly":n.inclusive?"smaller than or equal to":"smaller than"} ${new Date(Number(n.maximum))}`:t="Invalid input";break;case v.custom:t="Invalid input";break;case v.invalid_intersection_types:t="Intersection results could not be merged";break;case v.not_multiple_of:t=`Number must be a multiple of ${n.multipleOf}`;break;case v.not_finite:t="Number must be finite";break;default:t=e.defaultError,L.assertNever(n)}return{message:t}};let Pi=Xn;function ji(){return Pi}const Mi=n=>{const{data:e,path:t,errorMaps:r,issueData:s}=n,a=[...t,...s.path||[]],i={...s,path:a};if(s.message!==void 0)return{...s,path:a,message:s.message};let o="";const c=r.filter(p=>!!p).slice().reverse();for(const p of c)o=p(i,{data:e,defaultError:o}).message;return{...s,path:a,message:o}};function x(n,e){const t=ji(),r=Mi({issueData:e,data:n.data,path:n.path,errorMaps:[n.common.contextualErrorMap,n.schemaErrorMap,t,t===Xn?void 0:Xn].filter(s=>!!s)});n.common.issues.push(r)}class oe{constructor(){this.value="valid"}dirty(){this.value==="valid"&&(this.value="dirty")}abort(){this.value!=="aborted"&&(this.value="aborted")}static mergeArray(e,t){const r=[];for(const s of t){if(s.status==="aborted")return E;s.status==="dirty"&&e.dirty(),r.push(s.value)}return{status:e.value,value:r}}static async mergeObjectAsync(e,t){const r=[];for(const s of t){const a=await s.key,i=await s.value;r.push({key:a,value:i})}return oe.mergeObjectSync(e,r)}static mergeObjectSync(e,t){const r={};for(const s of t){const{key:a,value:i}=s;if(a.status==="aborted"||i.status==="aborted")return E;a.status==="dirty"&&e.dirty(),i.status==="dirty"&&e.dirty(),a.value!=="__proto__"&&(typeof i.value<"u"||s.alwaysSet)&&(r[a.value]=i.value)}return{status:e.value,value:r}}}const E=Object.freeze({status:"aborted"}),Rt=n=>({status:"dirty",value:n}),_e=n=>({status:"valid",value:n}),us=n=>n.status==="aborted",cs=n=>n.status==="dirty",lt=n=>n.status==="valid",yn=n=>typeof Promise<"u"&&n instanceof Promise;var I;(function(n){n.errToObj=e=>typeof e=="string"?{message:e}:e||{},n.toString=e=>typeof e=="string"?e:e==null?void 0:e.message})(I||(I={}));class xe{constructor(e,t,r,s){this._cachedPath=[],this.parent=e,this.data=t,this._path=r,this._key=s}get path(){return this._cachedPath.length||(Array.isArray(this._key)?this._cachedPath.push(...this._path,...this._key):this._cachedPath.push(...this._path,this._key)),this._cachedPath}}const ds=(n,e)=>{if(lt(e))return{success:!0,data:e.value};if(!n.common.issues.length)throw new Error("Validation failed but no issues detected.");return{success:!1,get error(){if(this._error)return this._error;const t=new Ce(n.common.issues);return this._error=t,this._error}}};function j(n){if(!n)return{};const{errorMap:e,invalid_type_error:t,required_error:r,description:s}=n;if(e&&(t||r))throw new Error(`Can't use "invalid_type_error" or "required_error" in conjunction with custom error map.`);return e?{errorMap:e,description:s}:{errorMap:(i,o)=>{const{message:c}=n;return i.code==="invalid_enum_value"?{message:c??o.defaultError}:typeof o.data>"u"?{message:c??r??o.defaultError}:i.code!=="invalid_type"?{message:o.defaultError}:{message:c??t??o.defaultError}},description:s}}class ${get description(){return this._def.description}_getType(e){return $e(e.data)}_getOrReturnCtx(e,t){return t||{common:e.parent.common,data:e.data,parsedType:$e(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}_processInputParams(e){return{status:new oe,ctx:{common:e.parent.common,data:e.data,parsedType:$e(e.data),schemaErrorMap:this._def.errorMap,path:e.path,parent:e.parent}}}_parseSync(e){const t=this._parse(e);if(yn(t))throw new Error("Synchronous parse encountered promise.");return t}_parseAsync(e){const t=this._parse(e);return Promise.resolve(t)}parse(e,t){const r=this.safeParse(e,t);if(r.success)return r.data;throw r.error}safeParse(e,t){const r={common:{issues:[],async:(t==null?void 0:t.async)??!1,contextualErrorMap:t==null?void 0:t.errorMap},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:$e(e)},s=this._parseSync({data:e,path:r.path,parent:r});return ds(r,s)}"~validate"(e){var r,s;const t={common:{issues:[],async:!!this["~standard"].async},path:[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:$e(e)};if(!this["~standard"].async)try{const a=this._parseSync({data:e,path:[],parent:t});return lt(a)?{value:a.value}:{issues:t.common.issues}}catch(a){(s=(r=a==null?void 0:a.message)==null?void 0:r.toLowerCase())!=null&&s.includes("encountered")&&(this["~standard"].async=!0),t.common={issues:[],async:!0}}return this._parseAsync({data:e,path:[],parent:t}).then(a=>lt(a)?{value:a.value}:{issues:t.common.issues})}async parseAsync(e,t){const r=await this.safeParseAsync(e,t);if(r.success)return r.data;throw r.error}async safeParseAsync(e,t){const r={common:{issues:[],contextualErrorMap:t==null?void 0:t.errorMap,async:!0},path:(t==null?void 0:t.path)||[],schemaErrorMap:this._def.errorMap,parent:null,data:e,parsedType:$e(e)},s=this._parse({data:e,path:r.path,parent:r}),a=await(yn(s)?s:Promise.resolve(s));return ds(r,a)}refine(e,t){const r=s=>typeof t=="string"||typeof t>"u"?{message:t}:typeof t=="function"?t(s):t;return this._refinement((s,a)=>{const i=e(s),o=()=>a.addIssue({code:v.custom,...r(s)});return typeof Promise<"u"&&i instanceof Promise?i.then(c=>c?!0:(o(),!1)):i?!0:(o(),!1)})}refinement(e,t){return this._refinement((r,s)=>e(r)?!0:(s.addIssue(typeof t=="function"?t(r,s):t),!1))}_refinement(e){return new Xe({schema:this,typeName:N.ZodEffects,effect:{type:"refinement",refinement:e}})}superRefine(e){return this._refinement(e)}constructor(e){this.spa=this.safeParseAsync,this._def=e,this.parse=this.parse.bind(this),this.safeParse=this.safeParse.bind(this),this.parseAsync=this.parseAsync.bind(this),this.safeParseAsync=this.safeParseAsync.bind(this),this.spa=this.spa.bind(this),this.refine=this.refine.bind(this),this.refinement=this.refinement.bind(this),this.superRefine=this.superRefine.bind(this),this.optional=this.optional.bind(this),this.nullable=this.nullable.bind(this),this.nullish=this.nullish.bind(this),this.array=this.array.bind(this),this.promise=this.promise.bind(this),this.or=this.or.bind(this),this.and=this.and.bind(this),this.transform=this.transform.bind(this),this.brand=this.brand.bind(this),this.default=this.default.bind(this),this.catch=this.catch.bind(this),this.describe=this.describe.bind(this),this.pipe=this.pipe.bind(this),this.readonly=this.readonly.bind(this),this.isNullable=this.isNullable.bind(this),this.isOptional=this.isOptional.bind(this),this["~standard"]={version:1,vendor:"zod",validate:t=>this["~validate"](t)}}optional(){return Ne.create(this,this._def)}nullable(){return Qe.create(this,this._def)}nullish(){return this.nullable().optional()}array(){return Se.create(this)}promise(){return kn.create(this,this._def)}or(e){return wn.create([this,e],this._def)}and(e){return bn.create(this,e,this._def)}transform(e){return new Xe({...j(this._def),schema:this,typeName:N.ZodEffects,effect:{type:"transform",transform:e}})}default(e){const t=typeof e=="function"?e:()=>e;return new In({...j(this._def),innerType:this,defaultValue:t,typeName:N.ZodDefault})}brand(){return new vs({typeName:N.ZodBranded,type:this,...j(this._def)})}catch(e){const t=typeof e=="function"?e:()=>e;return new An({...j(this._def),innerType:this,catchValue:t,typeName:N.ZodCatch})}describe(e){const t=this.constructor;return new t({...this._def,description:e})}pipe(e){return ir.create(this,e)}readonly(){return Cn.create(this)}isOptional(){return this.safeParse(void 0).success}isNullable(){return this.safeParse(null).success}}const Zi=/^c[^\s-]{8,}$/i,$i=/^[0-9a-z]+$/,Fi=/^[0-9A-HJKMNP-TV-Z]{26}$/i,Li=/^[0-9a-fA-F]{8}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{4}\b-[0-9a-fA-F]{12}$/i,Ui=/^[a-z0-9_-]{21}$/i,Ji=/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]*$/,Bi=/^[-+]?P(?!$)(?:(?:[-+]?\d+Y)|(?:[-+]?\d+[.,]\d+Y$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:(?:[-+]?\d+W)|(?:[-+]?\d+[.,]\d+W$))?(?:(?:[-+]?\d+D)|(?:[-+]?\d+[.,]\d+D$))?(?:T(?=[\d+-])(?:(?:[-+]?\d+H)|(?:[-+]?\d+[.,]\d+H$))?(?:(?:[-+]?\d+M)|(?:[-+]?\d+[.,]\d+M$))?(?:[-+]?\d+(?:[.,]\d+)?S)?)??$/,qi=/^(?!\.)(?!.*\.\.)([A-Z0-9_'+\-\.]*)[A-Z0-9_+-]@([A-Z0-9][A-Z0-9\-]*\.)+[A-Z]{2,}$/i,Gi="^(\\p{Extended_Pictographic}|\\p{Emoji_Component})+$";let Qn;const Vi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])$/,zi=/^(?:(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\.){3}(?:25[0-5]|2[0-4][0-9]|1[0-9][0-9]|[1-9][0-9]|[0-9])\/(3[0-2]|[12]?[0-9])$/,Wi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))$/,Hi=/^(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))\/(12[0-8]|1[01][0-9]|[1-9]?[0-9])$/,Yi=/^([0-9a-zA-Z+/]{4})*(([0-9a-zA-Z+/]{2}==)|([0-9a-zA-Z+/]{3}=))?$/,Xi=/^([0-9a-zA-Z-_]{4})*(([0-9a-zA-Z-_]{2}(==)?)|([0-9a-zA-Z-_]{3}(=)?))?$/,ls="((\\d\\d[2468][048]|\\d\\d[13579][26]|\\d\\d0[48]|[02468][048]00|[13579][26]00)-02-29|\\d{4}-((0[13578]|1[02])-(0[1-9]|[12]\\d|3[01])|(0[469]|11)-(0[1-9]|[12]\\d|30)|(02)-(0[1-9]|1\\d|2[0-8])))",Qi=new RegExp(`^${ls}$`);function ps(n){let e="[0-5]\\d";n.precision?e=`${e}\\.\\d{${n.precision}}`:n.precision==null&&(e=`${e}(\\.\\d+)?`);const t=n.precision?"+":"?";return`([01]\\d|2[0-3]):[0-5]\\d(:${e})${t}`}function Ki(n){return new RegExp(`^${ps(n)}$`)}function eo(n){let e=`${ls}T${ps(n)}`;const t=[];return t.push(n.local?"Z?":"Z"),n.offset&&t.push("([+-]\\d{2}:?\\d{2})"),e=`${e}(${t.join("|")})`,new RegExp(`^${e}$`)}function to(n,e){return!!((e==="v4"||!e)&&Vi.test(n)||(e==="v6"||!e)&&Wi.test(n))}function no(n,e){if(!Ji.test(n))return!1;try{const[t]=n.split("."),r=t.replace(/-/g,"+").replace(/_/g,"/").padEnd(t.length+(4-t.length%4)%4,"="),s=JSON.parse(atob(r));return!(typeof s!="object"||s===null||"typ"in s&&(s==null?void 0:s.typ)!=="JWT"||!s.alg||e&&s.alg!==e)}catch{return!1}}function ro(n,e){return!!((e==="v4"||!e)&&zi.test(n)||(e==="v6"||!e)&&Hi.test(n))}class Oe extends ${_parse(e){if(this._def.coerce&&(e.data=String(e.data)),this._getType(e)!==S.string){const a=this._getOrReturnCtx(e);return x(a,{code:v.invalid_type,expected:S.string,received:a.parsedType}),E}const r=new oe;let s;for(const a of this._def.checks)if(a.kind==="min")e.data.length<a.value&&(s=this._getOrReturnCtx(e,s),x(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="max")e.data.length>a.value&&(s=this._getOrReturnCtx(e,s),x(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!1,message:a.message}),r.dirty());else if(a.kind==="length"){const i=e.data.length>a.value,o=e.data.length<a.value;(i||o)&&(s=this._getOrReturnCtx(e,s),i?x(s,{code:v.too_big,maximum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}):o&&x(s,{code:v.too_small,minimum:a.value,type:"string",inclusive:!0,exact:!0,message:a.message}),r.dirty())}else if(a.kind==="email")qi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"email",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="emoji")Qn||(Qn=new RegExp(Gi,"u")),Qn.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"emoji",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="uuid")Li.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"uuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="nanoid")Ui.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"nanoid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid")Zi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"cuid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="cuid2")$i.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"cuid2",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="ulid")Fi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"ulid",code:v.invalid_string,message:a.message}),r.dirty());else if(a.kind==="url")try{new URL(e.data)}catch{s=this._getOrReturnCtx(e,s),x(s,{validation:"url",code:v.invalid_string,message:a.message}),r.dirty()}else a.kind==="regex"?(a.regex.lastIndex=0,a.regex.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"regex",code:v.invalid_string,message:a.message}),r.dirty())):a.kind==="trim"?e.data=e.data.trim():a.kind==="includes"?e.data.includes(a.value,a.position)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:{includes:a.value,position:a.position},message:a.message}),r.dirty()):a.kind==="toLowerCase"?e.data=e.data.toLowerCase():a.kind==="toUpperCase"?e.data=e.data.toUpperCase():a.kind==="startsWith"?e.data.startsWith(a.value)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:{startsWith:a.value},message:a.message}),r.dirty()):a.kind==="endsWith"?e.data.endsWith(a.value)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:{endsWith:a.value},message:a.message}),r.dirty()):a.kind==="datetime"?eo(a).test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:"datetime",message:a.message}),r.dirty()):a.kind==="date"?Qi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:"date",message:a.message}),r.dirty()):a.kind==="time"?Ki(a).test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{code:v.invalid_string,validation:"time",message:a.message}),r.dirty()):a.kind==="duration"?Bi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"duration",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="ip"?to(e.data,a.version)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"ip",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="jwt"?no(e.data,a.alg)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"jwt",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="cidr"?ro(e.data,a.version)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"cidr",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64"?Yi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"base64",code:v.invalid_string,message:a.message}),r.dirty()):a.kind==="base64url"?Xi.test(e.data)||(s=this._getOrReturnCtx(e,s),x(s,{validation:"base64url",code:v.invalid_string,message:a.message}),r.dirty()):L.assertNever(a);return{status:r.value,value:e.data}}_regex(e,t,r){return this.refinement(s=>e.test(s),{validation:t,code:v.invalid_string,...I.errToObj(r)})}_addCheck(e){return new Oe({...this._def,checks:[...this._def.checks,e]})}email(e){return this._addCheck({kind:"email",...I.errToObj(e)})}url(e){return this._addCheck({kind:"url",...I.errToObj(e)})}emoji(e){return this._addCheck({kind:"emoji",...I.errToObj(e)})}uuid(e){return this._addCheck({kind:"uuid",...I.errToObj(e)})}nanoid(e){return this._addCheck({kind:"nanoid",...I.errToObj(e)})}cuid(e){return this._addCheck({kind:"cuid",...I.errToObj(e)})}cuid2(e){return this._addCheck({kind:"cuid2",...I.errToObj(e)})}ulid(e){return this._addCheck({kind:"ulid",...I.errToObj(e)})}base64(e){return this._addCheck({kind:"base64",...I.errToObj(e)})}base64url(e){return this._addCheck({kind:"base64url",...I.errToObj(e)})}jwt(e){return this._addCheck({kind:"jwt",...I.errToObj(e)})}ip(e){return this._addCheck({kind:"ip",...I.errToObj(e)})}cidr(e){return this._addCheck({kind:"cidr",...I.errToObj(e)})}datetime(e){return typeof e=="string"?this._addCheck({kind:"datetime",precision:null,offset:!1,local:!1,message:e}):this._addCheck({kind:"datetime",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,offset:(e==null?void 0:e.offset)??!1,local:(e==null?void 0:e.local)??!1,...I.errToObj(e==null?void 0:e.message)})}date(e){return this._addCheck({kind:"date",message:e})}time(e){return typeof e=="string"?this._addCheck({kind:"time",precision:null,message:e}):this._addCheck({kind:"time",precision:typeof(e==null?void 0:e.precision)>"u"?null:e==null?void 0:e.precision,...I.errToObj(e==null?void 0:e.message)})}duration(e){return this._addCheck({kind:"duration",...I.errToObj(e)})}regex(e,t){return this._addCheck({kind:"regex",regex:e,...I.errToObj(t)})}includes(e,t){return this._addCheck({kind:"includes",value:e,position:t==null?void 0:t.position,...I.errToObj(t==null?void 0:t.message)})}startsWith(e,t){return this._addCheck({kind:"startsWith",value:e,...I.errToObj(t)})}endsWith(e,t){return this._addCheck({kind:"endsWith",value:e,...I.errToObj(t)})}min(e,t){return this._addCheck({kind:"min",value:e,...I.errToObj(t)})}max(e,t){return this._addCheck({kind:"max",value:e,...I.errToObj(t)})}length(e,t){return this._addCheck({kind:"length",value:e,...I.errToObj(t)})}nonempty(e){return this.min(1,I.errToObj(e))}trim(){return new Oe({...this._def,checks:[...this._def.checks,{kind:"trim"}]})}toLowerCase(){return new Oe({...this._def,checks:[...this._def.checks,{kind:"toLowerCase"}]})}toUpperCase(){return new Oe({...this._def,checks:[...this._def.checks,{kind:"toUpperCase"}]})}get isDatetime(){return!!this._def.checks.find(e=>e.kind==="datetime")}get isDate(){return!!this._def.checks.find(e=>e.kind==="date")}get isTime(){return!!this._def.checks.find(e=>e.kind==="time")}get isDuration(){return!!this._def.checks.find(e=>e.kind==="duration")}get isEmail(){return!!this._def.checks.find(e=>e.kind==="email")}get isURL(){return!!this._def.checks.find(e=>e.kind==="url")}get isEmoji(){return!!this._def.checks.find(e=>e.kind==="emoji")}get isUUID(){return!!this._def.checks.find(e=>e.kind==="uuid")}get isNANOID(){return!!this._def.checks.find(e=>e.kind==="nanoid")}get isCUID(){return!!this._def.checks.find(e=>e.kind==="cuid")}get isCUID2(){return!!this._def.checks.find(e=>e.kind==="cuid2")}get isULID(){return!!this._def.checks.find(e=>e.kind==="ulid")}get isIP(){return!!this._def.checks.find(e=>e.kind==="ip")}get isCIDR(){return!!this._def.checks.find(e=>e.kind==="cidr")}get isBase64(){return!!this._def.checks.find(e=>e.kind==="base64")}get isBase64url(){return!!this._def.checks.find(e=>e.kind==="base64url")}get minLength(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxLength(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Oe.create=n=>new Oe({checks:[],typeName:N.ZodString,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});function so(n,e){const t=(n.toString().split(".")[1]||"").length,r=(e.toString().split(".")[1]||"").length,s=t>r?t:r,a=Number.parseInt(n.toFixed(s).replace(".","")),i=Number.parseInt(e.toFixed(s).replace(".",""));return a%i/10**s}class pt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte,this.step=this.multipleOf}_parse(e){if(this._def.coerce&&(e.data=Number(e.data)),this._getType(e)!==S.number){const a=this._getOrReturnCtx(e);return x(a,{code:v.invalid_type,expected:S.number,received:a.parsedType}),E}let r;const s=new oe;for(const a of this._def.checks)a.kind==="int"?L.isInteger(e.data)||(r=this._getOrReturnCtx(e,r),x(r,{code:v.invalid_type,expected:"integer",received:"float",message:a.message}),s.dirty()):a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.too_small,minimum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.too_big,maximum:a.value,type:"number",inclusive:a.inclusive,exact:!1,message:a.message}),s.dirty()):a.kind==="multipleOf"?so(e.data,a.value)!==0&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):a.kind==="finite"?Number.isFinite(e.data)||(r=this._getOrReturnCtx(e,r),x(r,{code:v.not_finite,message:a.message}),s.dirty()):L.assertNever(a);return{status:s.value,value:e.data}}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new pt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new pt({...this._def,checks:[...this._def.checks,e]})}int(e){return this._addCheck({kind:"int",message:I.toString(e)})}positive(e){return this._addCheck({kind:"min",value:0,inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:0,inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:0,inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:0,inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}finite(e){return this._addCheck({kind:"finite",message:I.toString(e)})}safe(e){return this._addCheck({kind:"min",inclusive:!0,value:Number.MIN_SAFE_INTEGER,message:I.toString(e)})._addCheck({kind:"max",inclusive:!0,value:Number.MAX_SAFE_INTEGER,message:I.toString(e)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}get isInt(){return!!this._def.checks.find(e=>e.kind==="int"||e.kind==="multipleOf"&&L.isInteger(e.value))}get isFinite(){let e=null,t=null;for(const r of this._def.checks){if(r.kind==="finite"||r.kind==="int"||r.kind==="multipleOf")return!0;r.kind==="min"?(t===null||r.value>t)&&(t=r.value):r.kind==="max"&&(e===null||r.value<e)&&(e=r.value)}return Number.isFinite(t)&&Number.isFinite(e)}}pt.create=n=>new pt({checks:[],typeName:N.ZodNumber,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class Dt extends ${constructor(){super(...arguments),this.min=this.gte,this.max=this.lte}_parse(e){if(this._def.coerce)try{e.data=BigInt(e.data)}catch{return this._getInvalidInput(e)}if(this._getType(e)!==S.bigint)return this._getInvalidInput(e);let r;const s=new oe;for(const a of this._def.checks)a.kind==="min"?(a.inclusive?e.data<a.value:e.data<=a.value)&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.too_small,type:"bigint",minimum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="max"?(a.inclusive?e.data>a.value:e.data>=a.value)&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.too_big,type:"bigint",maximum:a.value,inclusive:a.inclusive,message:a.message}),s.dirty()):a.kind==="multipleOf"?e.data%a.value!==BigInt(0)&&(r=this._getOrReturnCtx(e,r),x(r,{code:v.not_multiple_of,multipleOf:a.value,message:a.message}),s.dirty()):L.assertNever(a);return{status:s.value,value:e.data}}_getInvalidInput(e){const t=this._getOrReturnCtx(e);return x(t,{code:v.invalid_type,expected:S.bigint,received:t.parsedType}),E}gte(e,t){return this.setLimit("min",e,!0,I.toString(t))}gt(e,t){return this.setLimit("min",e,!1,I.toString(t))}lte(e,t){return this.setLimit("max",e,!0,I.toString(t))}lt(e,t){return this.setLimit("max",e,!1,I.toString(t))}setLimit(e,t,r,s){return new Dt({...this._def,checks:[...this._def.checks,{kind:e,value:t,inclusive:r,message:I.toString(s)}]})}_addCheck(e){return new Dt({...this._def,checks:[...this._def.checks,e]})}positive(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!1,message:I.toString(e)})}negative(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!1,message:I.toString(e)})}nonpositive(e){return this._addCheck({kind:"max",value:BigInt(0),inclusive:!0,message:I.toString(e)})}nonnegative(e){return this._addCheck({kind:"min",value:BigInt(0),inclusive:!0,message:I.toString(e)})}multipleOf(e,t){return this._addCheck({kind:"multipleOf",value:e,message:I.toString(t)})}get minValue(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e}get maxValue(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e}}Dt.create=n=>new Dt({checks:[],typeName:N.ZodBigInt,coerce:(n==null?void 0:n.coerce)??!1,...j(n)});class Kn extends ${_parse(e){if(this._def.coerce&&(e.data=!!e.data),this._getType(e)!==S.boolean){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.boolean,received:r.parsedType}),E}return _e(e.data)}}Kn.create=n=>new Kn({typeName:N.ZodBoolean,coerce:(n==null?void 0:n.coerce)||!1,...j(n)});class vn extends ${_parse(e){if(this._def.coerce&&(e.data=new Date(e.data)),this._getType(e)!==S.date){const a=this._getOrReturnCtx(e);return x(a,{code:v.invalid_type,expected:S.date,received:a.parsedType}),E}if(Number.isNaN(e.data.getTime())){const a=this._getOrReturnCtx(e);return x(a,{code:v.invalid_date}),E}const r=new oe;let s;for(const a of this._def.checks)a.kind==="min"?e.data.getTime()<a.value&&(s=this._getOrReturnCtx(e,s),x(s,{code:v.too_small,message:a.message,inclusive:!0,exact:!1,minimum:a.value,type:"date"}),r.dirty()):a.kind==="max"?e.data.getTime()>a.value&&(s=this._getOrReturnCtx(e,s),x(s,{code:v.too_big,message:a.message,inclusive:!0,exact:!1,maximum:a.value,type:"date"}),r.dirty()):L.assertNever(a);return{status:r.value,value:new Date(e.data.getTime())}}_addCheck(e){return new vn({...this._def,checks:[...this._def.checks,e]})}min(e,t){return this._addCheck({kind:"min",value:e.getTime(),message:I.toString(t)})}max(e,t){return this._addCheck({kind:"max",value:e.getTime(),message:I.toString(t)})}get minDate(){let e=null;for(const t of this._def.checks)t.kind==="min"&&(e===null||t.value>e)&&(e=t.value);return e!=null?new Date(e):null}get maxDate(){let e=null;for(const t of this._def.checks)t.kind==="max"&&(e===null||t.value<e)&&(e=t.value);return e!=null?new Date(e):null}}vn.create=n=>new vn({checks:[],coerce:(n==null?void 0:n.coerce)||!1,typeName:N.ZodDate,...j(n)});class fs extends ${_parse(e){if(this._getType(e)!==S.symbol){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.symbol,received:r.parsedType}),E}return _e(e.data)}}fs.create=n=>new fs({typeName:N.ZodSymbol,...j(n)});class er extends ${_parse(e){if(this._getType(e)!==S.undefined){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.undefined,received:r.parsedType}),E}return _e(e.data)}}er.create=n=>new er({typeName:N.ZodUndefined,...j(n)});class tr extends ${_parse(e){if(this._getType(e)!==S.null){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.null,received:r.parsedType}),E}return _e(e.data)}}tr.create=n=>new tr({typeName:N.ZodNull,...j(n)});class nr extends ${constructor(){super(...arguments),this._any=!0}_parse(e){return _e(e.data)}}nr.create=n=>new nr({typeName:N.ZodAny,...j(n)});class hs extends ${constructor(){super(...arguments),this._unknown=!0}_parse(e){return _e(e.data)}}hs.create=n=>new hs({typeName:N.ZodUnknown,...j(n)});class Fe extends ${_parse(e){const t=this._getOrReturnCtx(e);return x(t,{code:v.invalid_type,expected:S.never,received:t.parsedType}),E}}Fe.create=n=>new Fe({typeName:N.ZodNever,...j(n)});class ms extends ${_parse(e){if(this._getType(e)!==S.undefined){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.void,received:r.parsedType}),E}return _e(e.data)}}ms.create=n=>new ms({typeName:N.ZodVoid,...j(n)});class Se extends ${_parse(e){const{ctx:t,status:r}=this._processInputParams(e),s=this._def;if(t.parsedType!==S.array)return x(t,{code:v.invalid_type,expected:S.array,received:t.parsedType}),E;if(s.exactLength!==null){const i=t.data.length>s.exactLength.value,o=t.data.length<s.exactLength.value;(i||o)&&(x(t,{code:i?v.too_big:v.too_small,minimum:o?s.exactLength.value:void 0,maximum:i?s.exactLength.value:void 0,type:"array",inclusive:!0,exact:!0,message:s.exactLength.message}),r.dirty())}if(s.minLength!==null&&t.data.length<s.minLength.value&&(x(t,{code:v.too_small,minimum:s.minLength.value,type:"array",inclusive:!0,exact:!1,message:s.minLength.message}),r.dirty()),s.maxLength!==null&&t.data.length>s.maxLength.value&&(x(t,{code:v.too_big,maximum:s.maxLength.value,type:"array",inclusive:!0,exact:!1,message:s.maxLength.message}),r.dirty()),t.common.async)return Promise.all([...t.data].map((i,o)=>s.type._parseAsync(new xe(t,i,t.path,o)))).then(i=>oe.mergeArray(r,i));const a=[...t.data].map((i,o)=>s.type._parseSync(new xe(t,i,t.path,o)));return oe.mergeArray(r,a)}get element(){return this._def.type}min(e,t){return new Se({...this._def,minLength:{value:e,message:I.toString(t)}})}max(e,t){return new Se({...this._def,maxLength:{value:e,message:I.toString(t)}})}length(e,t){return new Se({...this._def,exactLength:{value:e,message:I.toString(t)}})}nonempty(e){return this.min(1,e)}}Se.create=(n,e)=>new Se({type:n,minLength:null,maxLength:null,exactLength:null,typeName:N.ZodArray,...j(e)});function ft(n){if(n instanceof Q){const e={};for(const t in n.shape){const r=n.shape[t];e[t]=Ne.create(ft(r))}return new Q({...n._def,shape:()=>e})}else return n instanceof Se?new Se({...n._def,type:ft(n.element)}):n instanceof Ne?Ne.create(ft(n.unwrap())):n instanceof Qe?Qe.create(ft(n.unwrap())):n instanceof He?He.create(n.items.map(e=>ft(e))):n}class Q extends ${constructor(){super(...arguments),this._cached=null,this.nonstrict=this.passthrough,this.augment=this.extend}_getCached(){if(this._cached!==null)return this._cached;const e=this._def.shape(),t=L.objectKeys(e);return this._cached={shape:e,keys:t},this._cached}_parse(e){if(this._getType(e)!==S.object){const p=this._getOrReturnCtx(e);return x(p,{code:v.invalid_type,expected:S.object,received:p.parsedType}),E}const{status:r,ctx:s}=this._processInputParams(e),{shape:a,keys:i}=this._getCached(),o=[];if(!(this._def.catchall instanceof Fe&&this._def.unknownKeys==="strip"))for(const p in s.data)i.includes(p)||o.push(p);const c=[];for(const p of i){const l=a[p],f=s.data[p];c.push({key:{status:"valid",value:p},value:l._parse(new xe(s,f,s.path,p)),alwaysSet:p in s.data})}if(this._def.catchall instanceof Fe){const p=this._def.unknownKeys;if(p==="passthrough")for(const l of o)c.push({key:{status:"valid",value:l},value:{status:"valid",value:s.data[l]}});else if(p==="strict")o.length>0&&(x(s,{code:v.unrecognized_keys,keys:o}),r.dirty());else if(p!=="strip")throw new Error("Internal ZodObject error: invalid unknownKeys value.")}else{const p=this._def.catchall;for(const l of o){const f=s.data[l];c.push({key:{status:"valid",value:l},value:p._parse(new xe(s,f,s.path,l)),alwaysSet:l in s.data})}}return s.common.async?Promise.resolve().then(async()=>{const p=[];for(const l of c){const f=await l.key,m=await l.value;p.push({key:f,value:m,alwaysSet:l.alwaysSet})}return p}).then(p=>oe.mergeObjectSync(r,p)):oe.mergeObjectSync(r,c)}get shape(){return this._def.shape()}strict(e){return I.errToObj,new Q({...this._def,unknownKeys:"strict",...e!==void 0?{errorMap:(t,r)=>{var a,i;const s=((i=(a=this._def).errorMap)==null?void 0:i.call(a,t,r).message)??r.defaultError;return t.code==="unrecognized_keys"?{message:I.errToObj(e).message??s}:{message:s}}}:{}})}strip(){return new Q({...this._def,unknownKeys:"strip"})}passthrough(){return new Q({...this._def,unknownKeys:"passthrough"})}extend(e){return new Q({...this._def,shape:()=>({...this._def.shape(),...e})})}merge(e){return new Q({unknownKeys:e._def.unknownKeys,catchall:e._def.catchall,shape:()=>({...this._def.shape(),...e._def.shape()}),typeName:N.ZodObject})}setKey(e,t){return this.augment({[e]:t})}catchall(e){return new Q({...this._def,catchall:e})}pick(e){const t={};for(const r of L.objectKeys(e))e[r]&&this.shape[r]&&(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}omit(e){const t={};for(const r of L.objectKeys(this.shape))e[r]||(t[r]=this.shape[r]);return new Q({...this._def,shape:()=>t})}deepPartial(){return ft(this)}partial(e){const t={};for(const r of L.objectKeys(this.shape)){const s=this.shape[r];e&&!e[r]?t[r]=s:t[r]=s.optional()}return new Q({...this._def,shape:()=>t})}required(e){const t={};for(const r of L.objectKeys(this.shape))if(e&&!e[r])t[r]=this.shape[r];else{let a=this.shape[r];for(;a instanceof Ne;)a=a._def.innerType;t[r]=a}return new Q({...this._def,shape:()=>t})}keyof(){return _s(L.objectKeys(this.shape))}}Q.create=(n,e)=>new Q({shape:()=>n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.strictCreate=(n,e)=>new Q({shape:()=>n,unknownKeys:"strict",catchall:Fe.create(),typeName:N.ZodObject,...j(e)}),Q.lazycreate=(n,e)=>new Q({shape:n,unknownKeys:"strip",catchall:Fe.create(),typeName:N.ZodObject,...j(e)});class wn extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=this._def.options;function s(a){for(const o of a)if(o.result.status==="valid")return o.result;for(const o of a)if(o.result.status==="dirty")return t.common.issues.push(...o.ctx.common.issues),o.result;const i=a.map(o=>new Ce(o.ctx.common.issues));return x(t,{code:v.invalid_union,unionErrors:i}),E}if(t.common.async)return Promise.all(r.map(async a=>{const i={...t,common:{...t.common,issues:[]},parent:null};return{result:await a._parseAsync({data:t.data,path:t.path,parent:i}),ctx:i}})).then(s);{let a;const i=[];for(const c of r){const p={...t,common:{...t.common,issues:[]},parent:null},l=c._parseSync({data:t.data,path:t.path,parent:p});if(l.status==="valid")return l;l.status==="dirty"&&!a&&(a={result:l,ctx:p}),p.common.issues.length&&i.push(p.common.issues)}if(a)return t.common.issues.push(...a.ctx.common.issues),a.result;const o=i.map(c=>new Ce(c));return x(t,{code:v.invalid_union,unionErrors:o}),E}}get options(){return this._def.options}}wn.create=(n,e)=>new wn({options:n,typeName:N.ZodUnion,...j(e)});const Ee=n=>n instanceof Sn?Ee(n.schema):n instanceof Xe?Ee(n.innerType()):n instanceof Tn?[n.value]:n instanceof Ye?n.options:n instanceof ar?L.objectValues(n.enum):n instanceof In?Ee(n._def.innerType):n instanceof er?[void 0]:n instanceof tr?[null]:n instanceof Ne?[void 0,...Ee(n.unwrap())]:n instanceof Qe?[null,...Ee(n.unwrap())]:n instanceof vs||n instanceof Cn?Ee(n.unwrap()):n instanceof An?Ee(n._def.innerType):[];class rr extends ${_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==S.object)return x(t,{code:v.invalid_type,expected:S.object,received:t.parsedType}),E;const r=this.discriminator,s=t.data[r],a=this.optionsMap.get(s);return a?t.common.async?a._parseAsync({data:t.data,path:t.path,parent:t}):a._parseSync({data:t.data,path:t.path,parent:t}):(x(t,{code:v.invalid_union_discriminator,options:Array.from(this.optionsMap.keys()),path:[r]}),E)}get discriminator(){return this._def.discriminator}get options(){return this._def.options}get optionsMap(){return this._def.optionsMap}static create(e,t,r){const s=new Map;for(const a of t){const i=Ee(a.shape[e]);if(!i.length)throw new Error(`A discriminator value for key \`${e}\` could not be extracted from all schema options`);for(const o of i){if(s.has(o))throw new Error(`Discriminator property ${String(e)} has duplicate value ${String(o)}`);s.set(o,a)}}return new rr({typeName:N.ZodDiscriminatedUnion,discriminator:e,options:t,optionsMap:s,...j(r)})}}function sr(n,e){const t=$e(n),r=$e(e);if(n===e)return{valid:!0,data:n};if(t===S.object&&r===S.object){const s=L.objectKeys(e),a=L.objectKeys(n).filter(o=>s.indexOf(o)!==-1),i={...n,...e};for(const o of a){const c=sr(n[o],e[o]);if(!c.valid)return{valid:!1};i[o]=c.data}return{valid:!0,data:i}}else if(t===S.array&&r===S.array){if(n.length!==e.length)return{valid:!1};const s=[];for(let a=0;a<n.length;a++){const i=n[a],o=e[a],c=sr(i,o);if(!c.valid)return{valid:!1};s.push(c.data)}return{valid:!0,data:s}}else return t===S.date&&r===S.date&&+n==+e?{valid:!0,data:n}:{valid:!1}}class bn extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=(a,i)=>{if(us(a)||us(i))return E;const o=sr(a.value,i.value);return o.valid?((cs(a)||cs(i))&&t.dirty(),{status:t.value,value:o.data}):(x(r,{code:v.invalid_intersection_types}),E)};return r.common.async?Promise.all([this._def.left._parseAsync({data:r.data,path:r.path,parent:r}),this._def.right._parseAsync({data:r.data,path:r.path,parent:r})]).then(([a,i])=>s(a,i)):s(this._def.left._parseSync({data:r.data,path:r.path,parent:r}),this._def.right._parseSync({data:r.data,path:r.path,parent:r}))}}bn.create=(n,e,t)=>new bn({left:n,right:e,typeName:N.ZodIntersection,...j(t)});class He extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==S.array)return x(r,{code:v.invalid_type,expected:S.array,received:r.parsedType}),E;if(r.data.length<this._def.items.length)return x(r,{code:v.too_small,minimum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),E;!this._def.rest&&r.data.length>this._def.items.length&&(x(r,{code:v.too_big,maximum:this._def.items.length,inclusive:!0,exact:!1,type:"array"}),t.dirty());const a=[...r.data].map((i,o)=>{const c=this._def.items[o]||this._def.rest;return c?c._parse(new xe(r,i,r.path,o)):null}).filter(i=>!!i);return r.common.async?Promise.all(a).then(i=>oe.mergeArray(t,i)):oe.mergeArray(t,a)}get items(){return this._def.items}rest(e){return new He({...this._def,rest:e})}}He.create=(n,e)=>{if(!Array.isArray(n))throw new Error("You must pass an array of schemas to z.tuple([ ... ])");return new He({items:n,typeName:N.ZodTuple,rest:null,...j(e)})};class xn extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==S.object)return x(r,{code:v.invalid_type,expected:S.object,received:r.parsedType}),E;const s=[],a=this._def.keyType,i=this._def.valueType;for(const o in r.data)s.push({key:a._parse(new xe(r,o,r.path,o)),value:i._parse(new xe(r,r.data[o],r.path,o)),alwaysSet:o in r.data});return r.common.async?oe.mergeObjectAsync(t,s):oe.mergeObjectSync(t,s)}get element(){return this._def.valueType}static create(e,t,r){return t instanceof $?new xn({keyType:e,valueType:t,typeName:N.ZodRecord,...j(r)}):new xn({keyType:Oe.create(),valueType:e,typeName:N.ZodRecord,...j(t)})}}class gs extends ${get keySchema(){return this._def.keyType}get valueSchema(){return this._def.valueType}_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==S.map)return x(r,{code:v.invalid_type,expected:S.map,received:r.parsedType}),E;const s=this._def.keyType,a=this._def.valueType,i=[...r.data.entries()].map(([o,c],p)=>({key:s._parse(new xe(r,o,r.path,[p,"key"])),value:a._parse(new xe(r,c,r.path,[p,"value"]))}));if(r.common.async){const o=new Map;return Promise.resolve().then(async()=>{for(const c of i){const p=await c.key,l=await c.value;if(p.status==="aborted"||l.status==="aborted")return E;(p.status==="dirty"||l.status==="dirty")&&t.dirty(),o.set(p.value,l.value)}return{status:t.value,value:o}})}else{const o=new Map;for(const c of i){const p=c.key,l=c.value;if(p.status==="aborted"||l.status==="aborted")return E;(p.status==="dirty"||l.status==="dirty")&&t.dirty(),o.set(p.value,l.value)}return{status:t.value,value:o}}}}gs.create=(n,e,t)=>new gs({valueType:e,keyType:n,typeName:N.ZodMap,...j(t)});class Pt extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.parsedType!==S.set)return x(r,{code:v.invalid_type,expected:S.set,received:r.parsedType}),E;const s=this._def;s.minSize!==null&&r.data.size<s.minSize.value&&(x(r,{code:v.too_small,minimum:s.minSize.value,type:"set",inclusive:!0,exact:!1,message:s.minSize.message}),t.dirty()),s.maxSize!==null&&r.data.size>s.maxSize.value&&(x(r,{code:v.too_big,maximum:s.maxSize.value,type:"set",inclusive:!0,exact:!1,message:s.maxSize.message}),t.dirty());const a=this._def.valueType;function i(c){const p=new Set;for(const l of c){if(l.status==="aborted")return E;l.status==="dirty"&&t.dirty(),p.add(l.value)}return{status:t.value,value:p}}const o=[...r.data.values()].map((c,p)=>a._parse(new xe(r,c,r.path,p)));return r.common.async?Promise.all(o).then(c=>i(c)):i(o)}min(e,t){return new Pt({...this._def,minSize:{value:e,message:I.toString(t)}})}max(e,t){return new Pt({...this._def,maxSize:{value:e,message:I.toString(t)}})}size(e,t){return this.min(e,t).max(e,t)}nonempty(e){return this.min(1,e)}}Pt.create=(n,e)=>new Pt({valueType:n,minSize:null,maxSize:null,typeName:N.ZodSet,...j(e)});class Sn extends ${get schema(){return this._def.getter()}_parse(e){const{ctx:t}=this._processInputParams(e);return this._def.getter()._parse({data:t.data,path:t.path,parent:t})}}Sn.create=(n,e)=>new Sn({getter:n,typeName:N.ZodLazy,...j(e)});class Tn extends ${_parse(e){if(e.data!==this._def.value){const t=this._getOrReturnCtx(e);return x(t,{received:t.data,code:v.invalid_literal,expected:this._def.value}),E}return{status:"valid",value:e.data}}get value(){return this._def.value}}Tn.create=(n,e)=>new Tn({value:n,typeName:N.ZodLiteral,...j(e)});function _s(n,e){return new Ye({values:n,typeName:N.ZodEnum,...j(e)})}class Ye extends ${_parse(e){if(typeof e.data!="string"){const t=this._getOrReturnCtx(e),r=this._def.values;return x(t,{expected:L.joinValues(r),received:t.parsedType,code:v.invalid_type}),E}if(this._cache||(this._cache=new Set(this._def.values)),!this._cache.has(e.data)){const t=this._getOrReturnCtx(e),r=this._def.values;return x(t,{received:t.data,code:v.invalid_enum_value,options:r}),E}return _e(e.data)}get options(){return this._def.values}get enum(){const e={};for(const t of this._def.values)e[t]=t;return e}get Values(){const e={};for(const t of this._def.values)e[t]=t;return e}get Enum(){const e={};for(const t of this._def.values)e[t]=t;return e}extract(e,t=this._def){return Ye.create(e,{...this._def,...t})}exclude(e,t=this._def){return Ye.create(this.options.filter(r=>!e.includes(r)),{...this._def,...t})}}Ye.create=_s;class ar extends ${_parse(e){const t=L.getValidEnumValues(this._def.values),r=this._getOrReturnCtx(e);if(r.parsedType!==S.string&&r.parsedType!==S.number){const s=L.objectValues(t);return x(r,{expected:L.joinValues(s),received:r.parsedType,code:v.invalid_type}),E}if(this._cache||(this._cache=new Set(L.getValidEnumValues(this._def.values))),!this._cache.has(e.data)){const s=L.objectValues(t);return x(r,{received:r.data,code:v.invalid_enum_value,options:s}),E}return _e(e.data)}get enum(){return this._def.values}}ar.create=(n,e)=>new ar({values:n,typeName:N.ZodNativeEnum,...j(e)});class kn extends ${unwrap(){return this._def.type}_parse(e){const{ctx:t}=this._processInputParams(e);if(t.parsedType!==S.promise&&t.common.async===!1)return x(t,{code:v.invalid_type,expected:S.promise,received:t.parsedType}),E;const r=t.parsedType===S.promise?t.data:Promise.resolve(t.data);return _e(r.then(s=>this._def.type.parseAsync(s,{path:t.path,errorMap:t.common.contextualErrorMap})))}}kn.create=(n,e)=>new kn({type:n,typeName:N.ZodPromise,...j(e)});class Xe extends ${innerType(){return this._def.schema}sourceType(){return this._def.schema._def.typeName===N.ZodEffects?this._def.schema.sourceType():this._def.schema}_parse(e){const{status:t,ctx:r}=this._processInputParams(e),s=this._def.effect||null,a={addIssue:i=>{x(r,i),i.fatal?t.abort():t.dirty()},get path(){return r.path}};if(a.addIssue=a.addIssue.bind(a),s.type==="preprocess"){const i=s.transform(r.data,a);if(r.common.async)return Promise.resolve(i).then(async o=>{if(t.value==="aborted")return E;const c=await this._def.schema._parseAsync({data:o,path:r.path,parent:r});return c.status==="aborted"?E:c.status==="dirty"||t.value==="dirty"?Rt(c.value):c});{if(t.value==="aborted")return E;const o=this._def.schema._parseSync({data:i,path:r.path,parent:r});return o.status==="aborted"?E:o.status==="dirty"||t.value==="dirty"?Rt(o.value):o}}if(s.type==="refinement"){const i=o=>{const c=s.refinement(o,a);if(r.common.async)return Promise.resolve(c);if(c instanceof Promise)throw new Error("Async refinement encountered during synchronous parse operation. Use .parseAsync instead.");return o};if(r.common.async===!1){const o=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});return o.status==="aborted"?E:(o.status==="dirty"&&t.dirty(),i(o.value),{status:t.value,value:o.value})}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(o=>o.status==="aborted"?E:(o.status==="dirty"&&t.dirty(),i(o.value).then(()=>({status:t.value,value:o.value}))))}if(s.type==="transform")if(r.common.async===!1){const i=this._def.schema._parseSync({data:r.data,path:r.path,parent:r});if(!lt(i))return E;const o=s.transform(i.value,a);if(o instanceof Promise)throw new Error("Asynchronous transform encountered during synchronous parse operation. Use .parseAsync instead.");return{status:t.value,value:o}}else return this._def.schema._parseAsync({data:r.data,path:r.path,parent:r}).then(i=>lt(i)?Promise.resolve(s.transform(i.value,a)).then(o=>({status:t.value,value:o})):E);L.assertNever(s)}}Xe.create=(n,e,t)=>new Xe({schema:n,typeName:N.ZodEffects,effect:e,...j(t)}),Xe.createWithPreprocess=(n,e,t)=>new Xe({schema:e,effect:{type:"preprocess",transform:n},typeName:N.ZodEffects,...j(t)});class Ne extends ${_parse(e){return this._getType(e)===S.undefined?_e(void 0):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Ne.create=(n,e)=>new Ne({innerType:n,typeName:N.ZodOptional,...j(e)});class Qe extends ${_parse(e){return this._getType(e)===S.null?_e(null):this._def.innerType._parse(e)}unwrap(){return this._def.innerType}}Qe.create=(n,e)=>new Qe({innerType:n,typeName:N.ZodNullable,...j(e)});class In extends ${_parse(e){const{ctx:t}=this._processInputParams(e);let r=t.data;return t.parsedType===S.undefined&&(r=this._def.defaultValue()),this._def.innerType._parse({data:r,path:t.path,parent:t})}removeDefault(){return this._def.innerType}}In.create=(n,e)=>new In({innerType:n,typeName:N.ZodDefault,defaultValue:typeof e.default=="function"?e.default:()=>e.default,...j(e)});class An extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r={...t,common:{...t.common,issues:[]}},s=this._def.innerType._parse({data:r.data,path:r.path,parent:{...r}});return yn(s)?s.then(a=>({status:"valid",value:a.status==="valid"?a.value:this._def.catchValue({get error(){return new Ce(r.common.issues)},input:r.data})})):{status:"valid",value:s.status==="valid"?s.value:this._def.catchValue({get error(){return new Ce(r.common.issues)},input:r.data})}}removeCatch(){return this._def.innerType}}An.create=(n,e)=>new An({innerType:n,typeName:N.ZodCatch,catchValue:typeof e.catch=="function"?e.catch:()=>e.catch,...j(e)});class ys extends ${_parse(e){if(this._getType(e)!==S.nan){const r=this._getOrReturnCtx(e);return x(r,{code:v.invalid_type,expected:S.nan,received:r.parsedType}),E}return{status:"valid",value:e.data}}}ys.create=n=>new ys({typeName:N.ZodNaN,...j(n)});class vs extends ${_parse(e){const{ctx:t}=this._processInputParams(e),r=t.data;return this._def.type._parse({data:r,path:t.path,parent:t})}unwrap(){return this._def.type}}class ir extends ${_parse(e){const{status:t,ctx:r}=this._processInputParams(e);if(r.common.async)return(async()=>{const a=await this._def.in._parseAsync({data:r.data,path:r.path,parent:r});return a.status==="aborted"?E:a.status==="dirty"?(t.dirty(),Rt(a.value)):this._def.out._parseAsync({data:a.value,path:r.path,parent:r})})();{const s=this._def.in._parseSync({data:r.data,path:r.path,parent:r});return s.status==="aborted"?E:s.status==="dirty"?(t.dirty(),{status:"dirty",value:s.value}):this._def.out._parseSync({data:s.value,path:r.path,parent:r})}}static create(e,t){return new ir({in:e,out:t,typeName:N.ZodPipeline})}}class Cn extends ${_parse(e){const t=this._def.innerType._parse(e),r=s=>(lt(s)&&(s.value=Object.freeze(s.value)),s);return yn(t)?t.then(s=>r(s)):r(t)}unwrap(){return this._def.innerType}}Cn.create=(n,e)=>new Cn({innerType:n,typeName:N.ZodReadonly,...j(e)});var N;(function(n){n.ZodString="ZodString",n.ZodNumber="ZodNumber",n.ZodNaN="ZodNaN",n.ZodBigInt="ZodBigInt",n.ZodBoolean="ZodBoolean",n.ZodDate="ZodDate",n.ZodSymbol="ZodSymbol",n.ZodUndefined="ZodUndefined",n.ZodNull="ZodNull",n.ZodAny="ZodAny",n.ZodUnknown="ZodUnknown",n.ZodNever="ZodNever",n.ZodVoid="ZodVoid",n.ZodArray="ZodArray",n.ZodObject="ZodObject",n.ZodUnion="ZodUnion",n.ZodDiscriminatedUnion="ZodDiscriminatedUnion",n.ZodIntersection="ZodIntersection",n.ZodTuple="ZodTuple",n.ZodRecord="ZodRecord",n.ZodMap="ZodMap",n.ZodSet="ZodSet",n.ZodFunction="ZodFunction",n.ZodLazy="ZodLazy",n.ZodLiteral="ZodLiteral",n.ZodEnum="ZodEnum",n.ZodEffects="ZodEffects",n.ZodNativeEnum="ZodNativeEnum",n.ZodOptional="ZodOptional",n.ZodNullable="ZodNullable",n.ZodDefault="ZodDefault",n.ZodCatch="ZodCatch",n.ZodPromise="ZodPromise",n.ZodBranded="ZodBranded",n.ZodPipeline="ZodPipeline",n.ZodReadonly="ZodReadonly"})(N||(N={}));const d=Oe.create,A=pt.create,jt=Kn.create,J=nr.create;Fe.create;const q=Se.create,g=Q.create,ws=wn.create,le=rr.create;bn.create,He.create;const se=xn.create,ao=Sn.create,h=Tn.create,ue=Ye.create;kn.create,Ne.create,Qe.create,g({name:d(),description:d().optional(),inputSchema:g({type:h("object"),properties:se(d(),J()),required:q(d()),additionalProperties:jt()})});async function io(n,e=!1){const t=[],r=new Set;for(const s of n){const a=await oo(s,e),o=[...new Set(a.map(c=>c.name))].filter(c=>r.has(c));if(o.length>0)throw new K(`Duplicate tool names found across MCP servers: ${o.join(", ")}`);for(const c of a)r.add(c.name),t.push(c)}return t}const or={};async function oo(n,e){return n.cacheToolsList&&or[n.name]?or[n.name]:Po(async t=>{const r=await n.listTools();t.spanData.result=r.map(a=>a.name);const s=r.map(a=>co(a,n,e));return n.cacheToolsList&&(or[n.name]=s),s},{data:{server:n.name}})}async function uo(n,e=!1){return io(n,e)}function co(n,e,t){var i,o,c,p;async function r(l,f){let m={};typeof l=="string"&&l?m=JSON.parse(l):typeof l=="object"&&l!=null&&(m=l);const T=Zt();T&&(T.spanData.mcp_data={server:e.name});const w=await e.callTool(n.name,m);return w.length===1?w[0]:w}const s={type:((i=n.inputSchema)==null?void 0:i.type)??"object",properties:((o=n.inputSchema)==null?void 0:o.properties)??{},required:((c=n.inputSchema)==null?void 0:c.required)??[],additionalProperties:((p=n.inputSchema)==null?void 0:p.additionalProperties)??!1};if(t||s.additionalProperties===!0)try{const l=lo(s);return _n({name:n.name,description:n.description||"",parameters:l,strict:!0,execute:r})}catch(l){C.warn(`Error converting MCP schema to strict mode: ${l}`)}const a={...s,additionalProperties:!0};return _n({name:n.name,description:n.description||"",parameters:a,strict:!1,execute:r})}function lo(n){const e={...n,additionalProperties:!1};return e.required||(e.required=[]),e}function po(){return{}}class On{constructor(){k(this,yt,new EventTarget)}on(e,t){return u(this,yt).addEventListener(e,r=>t(...r.detail??[])),this}off(e,t){return u(this,yt).removeEventListener(e,r=>t(...r.detail??[])),this}emit(e,...t){const r=new CustomEvent(e,{detail:t});return u(this,yt).dispatchEvent(r)}once(e,t){const r=(...s)=>{this.off(e,r),t(...s)};return this.on(e,r),this}}yt=new WeakMap;const bs=crypto.randomUUID.bind(crypto),fo=class{constructor(){}pipeTo(e,t){}pipeThrough(e,t){}},ho=globalThis.ReadableStream,mo=globalThis.TransformStream;class go{constructor(){_(this,"context",null)}run(e,t){return this.context=e,t()}getStore(){return this.context}enterWith(e){this.context=e}}class _o{constructor(){}setTimeout(e,t){const r=setTimeout(e,t);return r.ref=typeof r.ref=="function"?r.ref:()=>r,r.unref=typeof r.unref=="function"?r.unref:()=>r,r.hasRef=typeof r.hasRef=="function"?r.hasRef:()=>!0,r.refresh=typeof r.refresh=="function"?r.refresh:()=>r,r}clearTimeout(e){window.clearTimeout(e)}}const yo=new _o;let xs;function Te(){return xs??(xs=new go),xs}function Mt(){const n=Te().getStore();return n!=null&&n.trace?n.trace:null}function Zt(){const n=Te().getStore();return n!=null&&n.span?n.span:null}function Ss(n){return async()=>{const e=Mt();if(!e)throw new Error("No trace found");await e.start();const t=await n(e);return await e.end(),t}}async function vo(n,e,t={}){const r=typeof n=="string"?ke().createTrace({...t,name:n}):n;return Te().run({trace:r},Ss(e))}async function wo(n,e={}){if(Mt())return await n();const r=ke().createTrace(e);return Te().run({trace:r},Ss(n))}function En(n){const e=Te().getStore();if(!e)throw new Error("No existing trace found");e.span&&(e.span.previousSpan=e.previousSpan,e.previousSpan=e.span),e.span=n,Te().enterWith(e)}function $t(){var e;const n=Te().getStore();n&&(n.span=n.previousSpan,n.previousSpan=(e=n.previousSpan)==null?void 0:e.previousSpan,Te().enterWith(n))}function ht(n){const e=Zt();e&&e.setError(n)}function bo(n){var e,t,r;return{trace:(e=n.trace)==null?void 0:e.clone(),span:(t=n.span)==null?void 0:t.clone(),previousSpan:(r=n.previousSpan)==null?void 0:r.clone()}}function ur(n){const e=Te().getStore();if(!e)throw new Error("No existing trace found");const t=bo(e);return Te().run(t,n)}class xo{async export(e){if(ss.disabled){C.debug("Tracing is disabled. Skipping export");return}for(const t of e)t.type==="trace"?console.log(`[Exporter] Export trace traceId=${t.traceId} name=${t.name}`):console.log(`[Exporter] Export span: ${JSON.stringify(t)}`)}}class So{constructor(e,{maxQueueSize:t=1e3,maxBatchSize:r=100,scheduleDelay:s=5e3,exportTriggerRatio:a=.8}={}){k(this,ce);k(this,qt);k(this,vt);k(this,Gt);k(this,Vt);k(this,wt);k(this,ae,[]);k(this,Pe);k(this,Ue,null);k(this,Je,!1);k(this,bt,null);y(this,qt,t),y(this,vt,r),y(this,Gt,s),y(this,Vt,t*a),y(this,wt,e),y(this,Pe,yo),C.debug("Automatic trace export loop is not supported in this environment. You need to manually call `getGlobalTraceProvider().forceFlush()` to export traces.")}start(){y(this,bt,new AbortController),F(this,ce,Nr).call(this)}async onTraceStart(e){await F(this,ce,Er).call(this,e)}async onTraceEnd(e){}async onSpanStart(e){}async onSpanEnd(e){await F(this,ce,Er).call(this,e)}async shutdown(e){var t;for(e&&u(this,Pe).setTimeout(()=>{var r;(r=u(this,bt))==null||r.abort()},e),C.debug("Shutting down gracefully");u(this,ae).length>0;){if(C.debug(`Waiting for buffer to empty. Items left: ${u(this,ae).length}`),u(this,Je)||await F(this,ce,Ot).call(this,!0),(t=u(this,bt))!=null&&t.signal.aborted){C.debug("Timeout reached, force flushing"),await F(this,ce,Ot).call(this,!0);break}await new Promise(r=>u(this,Pe).setTimeout(r,500))}C.debug("Buffer empty. Exiting"),u(this,Pe)&&u(this,Ue)&&u(this,Pe).clearTimeout(u(this,Ue))}async forceFlush(){u(this,ae).length>0&&await F(this,ce,Ot).call(this,!0)}}qt=new WeakMap,vt=new WeakMap,Gt=new WeakMap,Vt=new WeakMap,wt=new WeakMap,ae=new WeakMap,Pe=new WeakMap,Ue=new WeakMap,Je=new WeakMap,bt=new WeakMap,ce=new WeakSet,Er=async function(e){if(u(this,ae).length+1>u(this,qt)){C.error("Dropping trace because buffer is full");return}u(this,ae).push(e),u(this,ae).length>u(this,Vt)&&await F(this,ce,Ot).call(this)},Nr=function(){y(this,Ue,u(this,Pe).setTimeout(async()=>{await F(this,ce,Ot).call(this),F(this,ce,Nr).call(this)},u(this,Gt))),typeof u(this,Ue).unref=="function"&&u(this,Ue).unref()},Ot=async function(e=!1){if(u(this,ae).length!==0){if(C.debug(`Exporting batches. Force: ${e}. Buffer size: ${u(this,ae).length}`),e||u(this,ae).length<u(this,vt)){const t=[...u(this,ae)];y(this,ae,[]),y(this,Je,!0),await u(this,wt).export(t),y(this,Je,!1)}else if(u(this,ae).length>0){const t=u(this,ae).splice(0,u(this,vt));y(this,Je,!0),await u(this,wt).export(t),y(this,Je,!1)}}};class To{constructor(){k(this,pe,[])}start(){for(const e of u(this,pe))e.start&&e.start()}addTraceProcessor(e){u(this,pe).push(e)}setProcessors(e){C.debug("Shutting down old processors");for(const t of u(this,pe))t.shutdown();y(this,pe,e)}async onTraceStart(e){for(const t of u(this,pe))await t.onTraceStart(e)}async onTraceEnd(e){for(const t of u(this,pe))await t.onTraceEnd(e)}async onSpanStart(e){for(const t of u(this,pe))await t.onSpanStart(e)}async onSpanEnd(e){for(const t of u(this,pe))await t.onSpanEnd(e)}async shutdown(e){for(const t of u(this,pe))await t.shutdown(e)}async forceFlush(){for(const e of u(this,pe))await e.forceFlush()}}pe=new WeakMap;let cr=null,dr=null;function ko(){return cr||(cr=new xo),cr}function Ts(){return dr||(dr=new So(ko())),dr}function ks(){return new Date().toISOString()}function Is(){return`trace_${bs().replace(/-/g,"")}`}function Io(){return`span_${bs().replace(/-/g,"").slice(0,24)}`}function Ao(n){return Object.fromEntries(Object.entries(n).filter(([e])=>!e.startsWith("_")))}const Ir=class Ir{constructor(e,t){_(this,"type","trace.span");k(this,zt);k(this,Wt);k(this,Ht);k(this,Yt);k(this,rt);k(this,Be);k(this,qe);k(this,st);k(this,Xt);y(this,Wt,e.traceId),y(this,Ht,e.spanId??Io()),y(this,zt,e.data),y(this,rt,t),y(this,Yt,e.parentId??null),y(this,st,e.error??null),y(this,Be,e.startedAt??null),y(this,qe,e.endedAt??null)}get traceId(){return u(this,Wt)}get spanData(){return u(this,zt)}get spanId(){return u(this,Ht)}get parentId(){return u(this,Yt)}get previousSpan(){return u(this,Xt)}set previousSpan(e){y(this,Xt,e)}start(){if(u(this,Be)){C.warn("Span already started");return}y(this,Be,ks()),u(this,rt).onSpanStart(this)}end(){if(u(this,qe)){C.debug("Span already finished",this.spanData);return}y(this,qe,ks()),u(this,rt).onSpanEnd(this)}setError(e){y(this,st,e)}get error(){return u(this,st)}get startedAt(){return u(this,Be)}get endedAt(){return u(this,qe)}clone(){var t;const e=new Ir({traceId:this.traceId,spanId:this.spanId,parentId:this.parentId??void 0,data:this.spanData,startedAt:u(this,Be)??void 0,endedAt:u(this,qe)??void 0,error:u(this,st)??void 0},u(this,rt));return e.previousSpan=(t=this.previousSpan)==null?void 0:t.clone(),e}toJSON(){return{object:this.type,id:this.spanId,trace_id:this.traceId,parent_id:this.parentId,started_at:this.startedAt,ended_at:this.endedAt,span_data:Ao(this.spanData),error:this.error}}};zt=new WeakMap,Wt=new WeakMap,Ht=new WeakMap,Yt=new WeakMap,rt=new WeakMap,Be=new WeakMap,qe=new WeakMap,st=new WeakMap,Xt=new WeakMap;let Ft=Ir;class Le extends Ft{constructor(e,t){super({traceId:"no-op",spanId:"no-op",data:e},t)}start(){}end(){}setError(){}toJSON(){return null}}const Ar=class Ar{constructor(e,t){_(this,"type","trace");_(this,"traceId");_(this,"name");_(this,"groupId",null);_(this,"metadata");k(this,xt);k(this,je);this.traceId=e.traceId??Is(),this.name=e.name??"Agent workflow",this.groupId=e.groupId??null,this.metadata=e.metadata??{},y(this,xt,t??Ts()),y(this,je,e.started??!1)}async start(){u(this,je)||(y(this,je,!0),await u(this,xt).onTraceStart(this))}async end(){u(this,je)&&(y(this,je,!1),await u(this,xt).onTraceEnd(this))}clone(){return new Ar({traceId:this.traceId,name:this.name,groupId:this.groupId??void 0,metadata:this.metadata,started:u(this,je)})}toJSON(){return{object:this.type,id:this.traceId,workflow_name:this.name,group_id:this.groupId,metadata:this.metadata}}};xt=new WeakMap,je=new WeakMap;let Lt=Ar;class lr extends Lt{constructor(){super({})}async start(){}async end(){}toJSON(){return null}}class Co{constructor(){k(this,Ln);k(this,re);k(this,at);y(this,re,new To),y(this,at,ss.disabled),F(this,Ln,wa).call(this)}registerProcessor(e){u(this,re).addTraceProcessor(e)}setProcessors(e){u(this,re).setProcessors(e)}getCurrentTrace(){return Mt()}getCurrentSpan(){return Zt()}setDisabled(e){y(this,at,e)}startExportLoop(){u(this,re).start()}createTrace(e){if(u(this,at))return C.debug("Tracing is disabled, Not creating trace %o",e),new lr;const t=e.traceId??Is(),r=e.name??"Agent workflow";return C.debug("Creating trace %s with name %s",t,r),new Lt({...e,name:r,traceId:t},u(this,re))}createSpan(e,t){if(u(this,at)||e.disabled)return C.debug("Tracing is disabled, Not creating span %o",e),new Le(e.data,u(this,re));let r,s;if(t){if(t instanceof Lt){if(t instanceof lr)return C.debug("Parent trace is no-op, returning NoopSpan"),new Le(e.data,u(this,re));s=t.traceId}else if(t instanceof Ft){if(t instanceof Le)return C.debug("Parent span is no-op, returning NoopSpan"),new Le(e.data,u(this,re));r=t.spanId,s=t.traceId}}else{const a=Mt(),i=Zt();if(!a)return C.error("No active trace. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Le(e.data,u(this,re));if(i instanceof Le||a instanceof lr)return C.debug(`Parent ${i} or ${a} is no-op, returning NoopSpan`),new Le(e.data,u(this,re));s=a.traceId,i?(C.debug("Using parent span %s",i.spanId),r=i.spanId):C.debug("No parent span, using current trace %s",a.traceId)}return s?(C.debug(`Creating span ${JSON.stringify(e.data)} with id ${e.spanId??s}`),new Ft({...e,traceId:s,parentId:r},u(this,re))):(C.error("No traceId found. Make sure to start a trace with `withTrace()` first. Returning NoopSpan."),new Le(e.data,u(this,re)))}async shutdown(e){try{C.debug("Shutting down tracing provider"),await u(this,re).shutdown(e)}catch(t){C.error("Error shutting down tracing provider %o",t)}}async forceFlush(){await u(this,re).forceFlush()}}re=new WeakMap,at=new WeakMap,Ln=new WeakSet,wa=function(){if(typeof process<"u"&&typeof process.on=="function"){const e=async()=>{const t=setTimeout(()=>{console.warn("Cleanup timeout, forcing exit"),process.exit(1)},5e3);try{await this.shutdown()}finally{clearTimeout(t)}};process.on("beforeExit",e),process.on("SIGINT",async()=>{await e(),process.exit(130)}),process.on("SIGTERM",async()=>{await e(),process.exit(0)}),process.on("unhandledRejection",async(t,r)=>{C.error("Unhandled rejection",t,r),await e(),process.exit(1)})}};let pr;function ke(){return pr||(pr=new Co),pr}function Nn(n){return async(e,...t)=>ur(async()=>{const r=n(...t);En(r);try{return r.start(),await e(r)}catch(s){throw r.setError({message:s.message,data:s.data}),s}finally{r.end(),$t()}})}function As(n,e){var t;return ke().createSpan({...n,data:{type:"agent",name:((t=n==null?void 0:n.data)==null?void 0:t.name)??"Agent",...n==null?void 0:n.data}},e)}function Oo(n,e){var t,r;return ke().createSpan({...n,data:{type:"function",input:((t=n==null?void 0:n.data)==null?void 0:t.input)??"",output:((r=n==null?void 0:n.data)==null?void 0:r.output)??"",...n==null?void 0:n.data}},e)}const Cs=Nn(Oo);function Eo(n,e){return ke().createSpan({...n,data:{type:"handoff",...n==null?void 0:n.data}},e)}const No=Nn(Eo);function Ro(n,e){return ke().createSpan({...n,data:{type:"guardrail",triggered:!1,...n==null?void 0:n.data}},e)}const Os=Nn(Ro);function Do(n,e){return ke().createSpan({...n,data:{type:"mcp_tools",...n==null?void 0:n.data}},e)}const Po=Nn(Do);function jo(n){ke().registerProcessor(n)}class fr{on(e,t){return this.eventEmitter.on(e,t),this.eventEmitter}off(e,t){return this.eventEmitter.off(e,t),this.eventEmitter}emit(e,...t){return this.eventEmitter.emit(e,...t)}once(e,t){return this.eventEmitter.once(e,t),this.eventEmitter}}class Mo extends fr{constructor(){super(...arguments);_(this,"eventEmitter",new On)}}class Zo extends fr{constructor(){super(...arguments);_(this,"eventEmitter",new On)}}function Es({name:n,execute:e}){return{type:"input",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"input",name:n},output:await e(t)}}}}function hr({name:n,execute:e}){return{type:"output",name:n,guardrailFunction:e,async run(t){return{guardrail:{type:"output",name:n},agent:t.agent,agentOutput:t.agentOutput,output:await e(t)}}}}function Ns(n){return JSON.stringify({assistant:n.name})}function $o(n){return`transfer_to_${mn(n.name)}`}function Fo(n){return`Handoff to the ${n.name} agent to handle the request. ${n.handoffDescription??""}`}class Rs{constructor(e,t){_(this,"toolName");_(this,"toolDescription");_(this,"inputJsonSchema",{type:"object",properties:{},required:[],additionalProperties:!1});_(this,"strictJsonSchema",!0);_(this,"onInvokeHandoff");_(this,"agentName");_(this,"inputFilter");_(this,"agent");this.agentName=e.name,this.onInvokeHandoff=t,this.toolName=$o(e),this.toolDescription=Fo(e),this.agent=e}getHandoffAsFunctionTool(){return{type:"function",name:this.toolName,description:this.toolDescription,parameters:this.inputJsonSchema,strict:this.strictJsonSchema}}}function Ds(n,e={}){let t;const r=!!e.onHandoff,s=!!e.inputType;if(!(r===s))throw new K("You must provide either both `onHandoff` and `inputType` or neither.");async function i(c,p){var l;if(t){if(!p)throw ht({message:`Handoff function expected non empty input but got: ${p}`,data:{details:"input is empty"}}),new de("Handoff function expected non empty input");try{const f=await t(p);e.onHandoff&&await e.onHandoff(c,f)}catch(f){throw ht({message:"Invalid JSON provided",data:{}}),C.dontLogToolData||C.error(`Invalid JSON when parsing: ${p}. Error: ${f}`),new de("Invalid JSON provided")}}else await((l=e.onHandoff)==null?void 0:l.call(e,c));return n}const o=new Rs(n,i);if(e.inputType){const c=Wn(e.inputType,o.toolName);o.inputJsonSchema=c.schema,o.strictJsonSchema=!0,t=c.parser}return e.toolNameOverride&&(o.toolName=e.toolNameOverride),e.toolDescriptionOverride&&(o.toolDescription=e.toolDescriptionOverride),e.inputFilter&&(o.inputFilter=e.inputFilter),o}function Rn(n){return n instanceof Rs?n:Ds(n)}function Lo(){throw new Error("No default model provider set. Make sure to set a provider using setDefaultModelProvider before calling getDefaultModelProvider or pass an explicit provider.")}const ne=g({providerData:se(d(),J()).optional()}),Ke=ne.extend({id:d().optional()}),Uo=ne.extend({type:h("refusal"),refusal:d()}),Jo=ne.extend({type:h("output_text"),text:d()}),mr=ne.extend({type:h("input_text"),text:d()}),Bo=ne.extend({type:h("input_image"),image:d().or(g({id:d()})).describe("Could be a URL, base64 or an object with a file ID.")}),qo=ne.extend({type:h("input_file"),file:d().or(g({id:d()})).describe("Contents of the file or an object with a file ID.")}),Ps=ne.extend({type:h("audio"),audio:d().or(g({id:d()})).describe("Base64 encoded audio data or file id"),format:d().nullable().optional(),transcript:d().nullable().optional()}),Go=ne.extend({type:h("image"),image:d().describe("Base64 encoded image data")}),Vo=ne.extend({type:h("text"),text:d()}),zo=ne.extend({type:h("image"),data:d().describe("Base64 encoded image data"),mediaType:d().describe("IANA media type of the image")}),Wo=ne.extend({type:h("computer_screenshot"),data:d().describe("Base64 encoded image data or URL")}),Ho=le("type",[g({type:h("screenshot")}),g({type:h("click"),x:A(),y:A(),button:ue(["left","right","wheel","back","forward"])}),g({type:h("double_click"),x:A(),y:A()}),g({type:h("scroll"),x:A(),y:A(),scroll_x:A(),scroll_y:A()}),g({type:h("type"),text:d()}),g({type:h("wait")}),g({type:h("move"),x:A(),y:A()}),g({type:h("keypress"),keys:q(d())}),g({type:h("drag"),path:q(g({x:A(),y:A()}))})]),Yo=le("type",[Jo,Uo,mr,Ps,Go]),gr=Ke.extend({type:h("message").optional()}),Dn=gr.extend({role:h("assistant"),status:ue(["in_progress","completed","incomplete"]),content:q(Yo)}),Xo=le("type",[mr,Bo,qo,Ps]),js=gr.extend({role:h("user"),content:q(Xo).or(d())}),Ms=gr.extend({role:h("system"),content:d()});le("role",[Ms,Dn,js]);const Ut=Ke.extend({type:h("hosted_tool_call"),name:d().describe("The name of the hosted tool"),arguments:d().describe("The arguments of the hosted tool call").optional(),status:d().optional(),output:d().optional()}),Jt=Ke.extend({type:h("function_call"),callId:d().describe("The ID of the tool call"),name:d().describe("The name of the function"),status:ue(["in_progress","completed","incomplete"]).optional(),arguments:d()}),_r=Ke.extend({type:h("function_call_result"),name:d().describe("The name of the tool"),callId:d().describe("The ID of the tool call"),status:ue(["in_progress","completed","incomplete"]),output:le("type",[Vo,zo])}),yr=Ke.extend({type:h("computer_call"),callId:d().describe("The ID of the computer call"),status:ue(["in_progress","completed","incomplete"]),action:Ho}),Qo=Ke.extend({type:h("computer_call_result"),callId:d().describe("The ID of the computer call"),output:Wo}),Ko=le("type",[yr,Jt,Ut]),vr=ne.extend({id:d().optional(),type:h("reasoning"),content:q(mr)}),Zs=Ke.extend({type:h("unknown")}),wr=le("type",[Dn,Ut,Jt,yr,vr,Zs]),eu=ws([js,Dn,Ms,Ut,Jt,yr,_r,Qo,vr,Zs]),tu=g({requests:A().optional(),inputTokens:A(),outputTokens:A(),totalTokens:A(),inputTokensDetails:se(d(),A()).optional(),outputTokensDetails:se(d(),A()).optional()}),$s=ne.extend({type:h("output_text_delta"),delta:d()}),nu=ne.extend({type:h("response_started")}),Fs=ne.extend({type:h("response_done"),response:ne.extend({id:d(),usage:tu,output:q(wr)})}),ru=ne.extend({type:h("model"),event:J().describe("The event from the model")});le("type",[$s,Fs,nu,ru]);class Pn{constructor(e){_(this,"requests");_(this,"inputTokens");_(this,"outputTokens");_(this,"totalTokens");_(this,"inputTokensDetails",[]);_(this,"outputTokensDetails",[]);typeof e>"u"?(this.requests=0,this.inputTokens=0,this.outputTokens=0,this.totalTokens=0,this.inputTokensDetails=[],this.outputTokensDetails=[]):(this.requests=(e==null?void 0:e.requests)??1,this.inputTokens=(e==null?void 0:e.inputTokens)??0,this.outputTokens=(e==null?void 0:e.outputTokens)??0,this.totalTokens=(e==null?void 0:e.totalTokens)??0,this.inputTokensDetails=e!=null&&e.inputTokensDetails?[e.inputTokensDetails]:[],this.outputTokensDetails=e!=null&&e.outputTokensDetails?[e.outputTokensDetails]:[])}add(e){this.requests+=e.requests,this.inputTokens+=e.inputTokens,this.outputTokens+=e.outputTokens,this.totalTokens+=e.totalTokens,this.inputTokensDetails.push(...e.inputTokensDetails),this.outputTokensDetails.push(...e.outputTokensDetails)}}class mt{constructor(e={}){_(this,"context");_(this,"usage");k(this,fe);this.context=e,this.usage=new Pn,y(this,fe,new Map)}_rebuildApprovals(e){y(this,fe,new Map(Object.entries(e)))}isToolApproved({toolName:e,callId:t}){const r=u(this,fe).get(e);if((r==null?void 0:r.approved)===!0&&r.rejected===!0)return C.warn("Tool is permanently approved and rejected at the same time. Approval takes precedence"),!0;if((r==null?void 0:r.approved)===!0)return!0;if((r==null?void 0:r.rejected)===!0)return!1;const s=Array.isArray(r==null?void 0:r.approved)?r.approved.includes(t):!1,a=Array.isArray(r==null?void 0:r.rejected)?r.rejected.includes(t):!1;if(s&&a)return C.warn(`Tool call ${t} is both approved and rejected at the same time. Approval takes precedence`),!0;if(s)return!0;if(a)return!1}approveTool(e,{alwaysApprove:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!0,rejected:[]});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.approved)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.approved.push(a)}u(this,fe).set(r,s)}rejectTool(e,{alwaysReject:t=!1}={}){const r=e.rawItem.name;if(t){u(this,fe).set(r,{approved:!1,rejected:!0});return}const s=u(this,fe).get(r)??{approved:[],rejected:[]};if(Array.isArray(s.rejected)){const a="callId"in e.rawItem?e.rawItem.callId:e.rawItem.id;s.rejected.push(a)}u(this,fe).set(r,s)}toJSON(){return{context:this.context,usage:this.usage,approvals:Object.fromEntries(u(this,fe).entries())}}}fe=new WeakMap;class Ls{constructor(e){_(this,"state");this.state=e}get history(){return Fn(this.input,this.newItems)}get output(){return Fn([],this.newItems)}get input(){return this.state._originalInput}get newItems(){return this.state._generatedItems}get rawResponses(){return this.state._modelResponses}get lastResponseId(){const e=this.rawResponses;return e&&e.length>0?e[e.length-1].responseId:void 0}get lastAgent(){return this.state._currentAgent}get inputGuardrailResults(){return this.state._inputGuardrailResults}get outputGuardrailResults(){return this.state._outputGuardrailResults}get interruptions(){var e;return((e=this.state._currentStep)==null?void 0:e.type)==="next_step_interruption"?this.state._currentStep.data.interruptions:[]}get finalOutput(){var e;if(((e=this.state._currentStep)==null?void 0:e.type)==="next_step_final_output")return this.state._currentAgent.processFinalOutput(this.state._currentStep.output);C.warn("Accessed finalOutput before agent run is completed.")}}class Us extends Ls{constructor(e){super(e)}}class su extends Ls{constructor(t={}){super(t.state);_(this,"currentTurn",0);_(this,"maxTurns");k(this,Qt,null);k(this,St);k(this,be);k(this,Ge);k(this,Kt);k(this,en);k(this,tn);k(this,nn,!1);y(this,St,t.signal),u(this,St)&&u(this,St).addEventListener("abort",async()=>{await u(this,Ge).cancel()}),y(this,Ge,new ho({start:r=>{y(this,be,r)},cancel:()=>{y(this,nn,!0)}})),y(this,Kt,new Promise((r,s)=>{y(this,en,r),y(this,tn,s)}))}get currentAgent(){return this.lastAgent}_addItem(t){var r;this.cancelled||(r=u(this,be))==null||r.enqueue(t)}_done(){var t;!this.cancelled&&u(this,be)&&(u(this,be).close(),y(this,be,void 0),(t=u(this,en))==null||t.call(this))}_raiseError(t){var r;!this.cancelled&&u(this,be)&&(u(this,be).error(t),y(this,be,void 0)),y(this,Qt,t),(r=u(this,tn))==null||r.call(this,t)}get cancelled(){return u(this,nn)}toStream(){return u(this,Ge)}get completed(){return u(this,Kt)}get error(){return u(this,Qt)}toTextStream(t={}){const r=u(this,Ge).pipeThrough(new mo({transform(s,a){if(s.type==="raw_model_stream_event"&&s.data.type==="output_text_delta"){const i=$s.parse(s.data);a.enqueue(i.delta)}}}));return t.compatibleWithNodeStreams?fo.fromWeb(r):r}[Symbol.asyncIterator](){return u(this,Ge)[Symbol.asyncIterator]()}}Qt=new WeakMap,St=new WeakMap,be=new WeakMap,Ge=new WeakMap,Kt=new WeakMap,en=new WeakMap,tn=new WeakMap,nn=new WeakMap;function Js(n){return n.type==="function"?{type:"function",name:n.name,description:n.description,parameters:n.parameters,strict:n.strict}:n.type==="computer"?{type:"computer",name:n.name,environment:n.computer.environment,dimensions:n.computer.dimensions}:{type:"hosted_tool",name:n.name,providerData:n.providerData}}function Bs(n){return{toolName:n.toolName,toolDescription:n.toolDescription,inputJsonSchema:n.inputJsonSchema,strictJsonSchema:n.strictJsonSchema}}class et{constructor(){_(this,"type","base_item");_(this,"rawItem")}toJSON(){return{type:this.type,rawItem:this.rawItem}}}class jn extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","message_output_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}get content(){let t="";for(const r of this.rawItem.content)r.type==="output_text"&&(t+=r.text);return t}}class tt extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class gt extends et{constructor(t,r,s){super();_(this,"rawItem");_(this,"agent");_(this,"output");_(this,"type","tool_call_output_item");this.rawItem=t,this.agent=r,this.output=s}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON(),output:We(this.output)}}}class br extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","reasoning_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class xr extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","handoff_call_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}class Sr extends et{constructor(t,r,s){super();_(this,"rawItem");_(this,"sourceAgent");_(this,"targetAgent");_(this,"type","handoff_output_item");this.rawItem=t,this.sourceAgent=r,this.targetAgent=s}toJSON(){return{...super.toJSON(),sourceAgent:this.sourceAgent.toJSON(),targetAgent:this.targetAgent.toJSON()}}}class Ie extends et{constructor(t,r){super();_(this,"rawItem");_(this,"agent");_(this,"type","tool_approval_item");this.rawItem=t,this.agent=r}toJSON(){return{...super.toJSON(),agent:this.agent.toJSON()}}}function qs(n){if(n.type!=="message"||n.role!=="assistant")return;const e=n.content[n.content.length-1];if(e.type==="output_text")return e.text}function au(n){return n.output.length===0?"":qs(n.output[n.output.length-1])||""}class iu{constructor(e){_(this,"data");_(this,"type","raw_model_stream_event");this.data=e}}class ou{constructor(e,t){_(this,"name");_(this,"item");_(this,"type","run_item_stream_event");this.name=e,this.item=t}}class uu{constructor(e){_(this,"agent");_(this,"type","agent_updated_stream_event");this.agent=e}}function Gs(n,e,t,r){var w;const s=[],a=[],i=[],o=[],c=[],p=[],l=new Map(r.map(b=>[b.toolName,b])),f=new Map(t.filter(b=>b.type==="function").map(b=>[b.name,b])),m=t.find(b=>b.type==="computer"),T=new Map(t.filter(b=>{var O;return b.type==="hosted_tool"&&((O=b.providerData)==null?void 0:O.type)==="mcp"}).map(b=>b).map(b=>[b.providerData.server_label,b]));for(const b of n.output){if(b.type==="message")b.role==="assistant"&&s.push(new jn(b,e));else if(b.type==="hosted_tool_call"){s.push(new tt(b,e));const R=b.name;if(p.push(R),((w=b.providerData)==null?void 0:w.type)==="mcp_approval_request"||b.name==="mcp_approval_request"){const H=b.providerData,te=H.server_label,me=T.get(te);if(typeof me>"u"){const pn=`MCP server (${te}) not found in Agent (${e.name})`;throw ht({message:pn,data:{mcp_server_label:te}}),new de(pn)}const ge=new Ie({type:"hosted_tool_call",name:H.name,id:H.id,status:"in_progress",providerData:H},e);c.push({requestItem:ge,mcpTool:me}),me.providerData.on_approval||s.push(ge)}}else if(b.type==="reasoning")s.push(new br(b,e));else if(b.type==="computer_call"){if(s.push(new tt(b,e)),p.push("computer_use"),!m)throw ht({message:"Model produced computer action without a computer tool.",data:{agent_name:e.name}}),new de("Model produced computer action without a computer tool.");o.push({toolCall:b,computer:m})}if(b.type!=="function_call")continue;p.push(b.name);const O=l.get(b.name);if(O)s.push(new xr(b,e)),a.push({toolCall:b,handoff:O});else{const R=f.get(b.name);if(!R)throw ht({message:`Tool ${b.name} not found in agent ${e.name}.`,data:{tool_name:b.name,agent_name:e.name}}),new de(`Tool ${b.name} not found in agent ${e.name}.`);s.push(new tt(b,e)),i.push({toolCall:b,tool:R})}}return{newItems:s,handoffs:a,functions:i,computerActions:o,mcpApprovalRequests:c,toolsUsed:p,hasToolsOrApprovalsToRun(){return a.length>0||i.length>0||c.length>0||o.length>0}}}const cu=le("type",[g({type:h("next_step_handoff"),newAgent:J()}),g({type:h("next_step_final_output"),output:d()}),g({type:h("next_step_run_again")}),g({type:h("next_step_interruption"),data:se(d(),J())})]);class we{constructor(e,t,r,s,a){_(this,"originalInput");_(this,"modelResponse");_(this,"preStepItems");_(this,"newStepItems");_(this,"nextStep");this.originalInput=e,this.modelResponse=t,this.preStepItems=r,this.newStepItems=s,this.nextStep=a}get generatedItems(){return this.preStepItems.concat(this.newStepItems)}}function Vs(n,e,t){return n.resetToolChoice&&e.hasUsedTools(n)?{...t,toolChoice:void 0}:t}async function zs(n,e,t,r,s,a,i){const o=t.filter(w=>w instanceof Ie&&"callId"in w.rawItem&&w.rawItem.type==="function_call").map(w=>w.rawItem.callId),c=s.functions.filter(w=>o.includes(w.toolCall.callId)),p=await Hs(n,c,a,i),l=p.map(w=>w.runItem),f=s.mcpApprovalRequests.filter(w=>{var b;return w.requestItem.type==="tool_approval_item"&&w.requestItem.rawItem.type==="hosted_tool_call"&&((b=w.requestItem.rawItem.providerData)==null?void 0:b.type)==="mcp_approval_request"});for(const w of f){const b=w.requestItem.rawItem.id,O=i._context.isToolApproved({toolName:w.requestItem.rawItem.name,callId:b});if(typeof O<"u"){const R={approve:O,approval_request_id:b,reason:void 0};l.push(new tt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:R},n))}}const m=await Ys(n,p,i),T=t.filter(w=>!(w instanceof Ie));return m.isFinalOutput?(a.emit("agent_end",i._context,n,m.finalOutput),n.emit("agent_end",i._context,m.finalOutput),new we(e,r,T,l,{type:"next_step_final_output",output:m.finalOutput})):m.isInterrupted?new we(e,r,T,l,{type:"next_step_interruption",data:{interruptions:m.interruptions}}):new we(e,r,T,l,{type:"next_step_run_again"})}async function Ws(n,e,t,r,s,a,i){const o=t;let c=s.newItems;const[p,l]=await Promise.all([Hs(n,s.functions,a,i),lu(n,s.computerActions,a,i._context)]);if(c=c.concat(p.map(w=>w.runItem)),c=c.concat(l),s.mcpApprovalRequests.length>0)for(const w of s.mcpApprovalRequests){const b=w.mcpTool.providerData,O=w.requestItem.rawItem.providerData;if(b.on_approval){const R=await b.on_approval(i._context,w.requestItem),H={approve:R.approve,approval_request_id:O.id,reason:R.reason};c.push(new tt({type:"hosted_tool_call",name:"mcp_approval_response",providerData:H},n))}else{c.push(w.requestItem);const R={type:"hosted_mcp_tool_approval",tool:w.mcpTool,runItem:new Ie({type:"hosted_tool_call",name:O.name,id:O.id,arguments:O.arguments,status:"in_progress",providerData:O},n)};p.push(R)}}if(s.handoffs.length>0)return await pu(n,e,o,c,r,s.handoffs,a,i._context);const f=await Ys(n,p,i);if(f.isFinalOutput)return a.emit("agent_end",i._context,n,f.finalOutput),n.emit("agent_end",i._context,f.finalOutput),new we(e,r,o,c,{type:"next_step_final_output",output:f.finalOutput});if(f.isInterrupted)return new we(e,r,o,c,{type:"next_step_interruption",data:{interruptions:f.interruptions}});const m=c.filter(w=>w instanceof jn),T=m.length>0?qs(m[m.length-1].rawItem):void 0;if(!T)return new we(e,r,o,c,{type:"next_step_run_again"});if(n.outputType==="text"&&!s.hasToolsOrApprovalsToRun())return new we(e,r,o,c,{type:"next_step_final_output",output:T});if(n.outputType!=="text"&&T){const{parser:w}=Wn(n.outputType,"final_output"),[b]=await Gn(()=>w(T));if(b)throw ht({message:"Invalid output type",data:{error:String(b)}}),new de("Invalid output type");return new we(e,r,o,c,{type:"next_step_final_output",output:T})}return new we(e,r,o,c,{type:"next_step_run_again"})}function Mn(n,e){return{type:"function_call_result",name:n.name,callId:n.callId,status:"completed",output:{type:"text",text:We(e)}}}async function Hs(n,e,t,r){async function s(a){let i=a.toolCall.arguments;if(a.tool.parameters&&(ze(a.tool.parameters)?i=a.tool.parameters.parse(i):i=JSON.parse(i)),await a.tool.needsApproval(r._context,i,a.toolCall.callId)){const c=r._context.isToolApproved({toolName:a.tool.name,callId:a.toolCall.callId});if(c===!1)return Cs(async p=>{const l="Tool execution was not approved.";return p.setError({message:l,data:{tool_name:a.tool.name,error:`Tool execution for ${a.toolCall.callId} was manually rejected by user.`}}),p.spanData.output=l,{type:"function_output",tool:a.tool,output:l,runItem:new gt(Mn(a.toolCall,l),n,l)}},{data:{name:a.tool.name}});if(c!==!0)return{type:"function_approval",tool:a.tool,runItem:new Ie(a.toolCall,n)}}return Cs(async c=>{t.config.traceIncludeSensitiveData&&(c.spanData.input=a.toolCall.arguments);try{t.emit("agent_tool_start",r._context,n,a.tool),n.emit("agent_tool_start",r._context,a.tool);const p=await a.tool.invoke(r._context,a.toolCall.arguments),l=We(p);return t.emit("agent_tool_end",r._context,n,a.tool,l),n.emit("agent_tool_end",r._context,a.tool,l),t.config.traceIncludeSensitiveData&&(c.spanData.output=l),{type:"function_output",tool:a.tool,output:p,runItem:new gt(Mn(a.toolCall,p),n,p)}}catch(p){throw c.setError({message:"Error running tool",data:{tool_name:a.tool.name,error:String(p)}}),p}},{data:{name:a.tool.name}})}try{return await Promise.all(e.map(s))}catch(a){throw new xi(`Failed to run function tools: ${a}`,a,r)}}async function du(n,e){const t=e.action;let r;switch(t.type){case"click":await n.click(t.x,t.y,t.button);break;case"double_click":await n.doubleClick(t.x,t.y);break;case"drag":await n.drag(t.path.map(s=>[s.x,s.y]));break;case"keypress":await n.keypress(t.keys);break;case"move":await n.move(t.x,t.y);break;case"screenshot":r=await n.screenshot();break;case"scroll":await n.scroll(t.x,t.y,t.scroll_x,t.scroll_y);break;case"type":await n.type(t.text);break;case"wait":await n.wait();break}if(typeof r<"u"||typeof n.screenshot=="function"&&(r=await n.screenshot(),typeof r<"u"))return r;throw new Error("Computer does not implement screenshot()")}async function lu(n,e,t,r,s=void 0){const a=s??C,i=[];for(const o of e){const c=o.computer.computer,p=o.toolCall;t.emit("agent_tool_start",r,n,o.computer),typeof n.emit=="function"&&n.emit("agent_tool_start",r,o.computer);let l;try{l=await du(c,p)}catch(T){a.error("Failed to execute computer action:",T),l=""}t.emit("agent_tool_end",r,n,o.computer,l),typeof n.emit=="function"&&n.emit("agent_tool_end",r,o.computer,l);const f=l?`data:image/png;base64,${l}`:"",m={type:"computer_call_result",callId:p.callId,output:{type:"computer_screenshot",data:f}};i.push(new gt(m,n,f))}return i}async function pu(n,e,t,r,s,a,i,o){if(r=[...r],a.length===0)return C.warn("Incorrectly called executeHandoffCalls with no handoffs. This should not happen. Moving on."),new we(e,s,t,r,{type:"next_step_run_again"});if(a.length>1){const p="Multiple handoffs detected, ignorning this one.";for(let l=1;l<a.length;l++)r.push(new gt(Mn(a[l].toolCall,p),n,p))}const c=a[0];return No(async p=>{const l=c.handoff,f=await l.onInvokeHandoff(o,c.toolCall.arguments);if(p.spanData.to_agent=f.name,a.length>1){const T=a.map(w=>w.handoff.agentName);p.setError({message:"Multiple handoffs requested",data:{requested_agents:T}})}r.push(new Sr(Mn(c.toolCall,Ns(f)),n,f)),i.emit("agent_handoff",o,n,f),n.emit("agent_handoff",o,f);const m=l.inputFilter??i.config.handoffInputFilter;if(m){C.debug("Filtering inputs for handoff"),typeof m!="function"&&p.setError({message:"Invalid input filter",data:{details:"not callable"}});const T={inputHistory:Array.isArray(e)?[...e]:e,preHandoffItems:[...t],newItems:[...r]},w=m(T);e=w.inputHistory,t=w.preHandoffItems,r=w.newItems}return new we(e,s,t,r,{type:"next_step_handoff",newAgent:f})},{data:{from_agent:n.name}})}const Zn={isFinalOutput:!1,isInterrupted:void 0};async function Ys(n,e,t){if(e.length===0)return Zn;const r=e.filter(i=>i.runItem instanceof Ie).map(i=>i.runItem);if(r.length>0)return{isFinalOutput:!1,isInterrupted:!0,interruptions:r};if(n.toolUseBehavior==="run_llm_again")return Zn;const s=e[0];if(n.toolUseBehavior==="stop_on_first_tool")return(s==null?void 0:s.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:We(s.output)}:Zn;const a=n.toolUseBehavior;if(typeof a=="object"){const i=e.find(o=>a.stopAtToolNames.includes(o.tool.name));return(i==null?void 0:i.type)==="function_output"?{isFinalOutput:!0,isInterrupted:void 0,finalOutput:We(i.output)}:Zn}if(typeof a=="function")return a(t._context,e);throw new K(`Invalid toolUseBehavior: ${a}`,t)}function Xs(n,e){for(const t of e.newStepItems){let r;if(t instanceof jn)r="message_output_created";else if(t instanceof xr)r="handoff_requested";else if(t instanceof Sr)r="handoff_occurred";else if(t instanceof tt)r="tool_called";else if(t instanceof gt)r="tool_output";else if(t instanceof br)r="reasoning_item_created";else if(t instanceof Ie)r="tool_approval_requested";else{C.warn("Unknown item type: ",t);continue}n._addItem(new ou(r,t))}}class Qs{constructor(){k(this,Tt,new Map)}addToolUse(e,t){u(this,Tt).set(e,t)}hasUsedTools(e){return u(this,Tt).has(e)}toJSON(){return Object.fromEntries(Array.from(u(this,Tt).entries()).map(([e,t])=>[e.name,t]))}}Tt=new WeakMap;const $n="1.0",fu=h($n),Ae=g({name:d()}),Ks=g({object:h("trace.span"),id:d(),trace_id:d(),parent_id:d().nullable(),started_at:d().nullable(),ended_at:d().nullable(),error:g({message:d(),data:se(d(),J()).optional()}).nullable(),span_data:se(d(),J())}).extend({previous_span:ao(()=>Ks).optional()}),ea=g({requests:A(),inputTokens:A(),outputTokens:A(),totalTokens:A()}),ta=g({usage:ea,output:q(wr),responseId:d().optional()}),na=le("type",[g({type:h("message_output_item"),rawItem:Dn,agent:Ae}),g({type:h("tool_call_item"),rawItem:Ko.or(Ut),agent:Ae}),g({type:h("tool_call_output_item"),rawItem:_r,agent:Ae,output:d()}),g({type:h("reasoning_item"),rawItem:vr,agent:Ae}),g({type:h("handoff_call_item"),rawItem:Jt,agent:Ae}),g({type:h("handoff_output_item"),rawItem:_r,sourceAgent:Ae,targetAgent:Ae}),g({type:h("tool_approval_item"),rawItem:Jt.or(Ut),agent:Ae})]),hu=g({object:h("trace"),id:d(),workflow_name:d(),group_id:d().nullable(),metadata:se(d(),J())}),mu=g({newItems:q(na),toolsUsed:q(d()),handoffs:q(g({toolCall:J(),handoff:J()})),functions:q(g({toolCall:J(),tool:J()})),computerActions:q(g({toolCall:J(),computer:J()})),mcpApprovalRequests:q(g({requestItem:g({rawItem:g({type:h("hosted_tool_call"),name:d(),arguments:d().optional(),status:d().optional(),output:d().optional()})}),mcpTool:g({type:h("hosted_tool"),name:h("hosted_mcp"),providerData:se(d(),J())})})).optional()}),ra=g({tripwireTriggered:jt(),outputInfo:J()}),gu=g({guardrail:g({type:h("input"),name:d()}),output:ra}),_u=g({guardrail:g({type:h("output"),name:d()}),agentOutput:J(),agent:Ae,output:ra}),sa=g({$schemaVersion:fu,currentTurn:A(),currentAgent:Ae,originalInput:d().or(q(eu)),modelResponses:q(ta),context:g({usage:ea,approvals:se(d(),g({approved:q(d()).or(jt()),rejected:q(d()).or(jt())})),context:se(d(),J())}),toolUseTracker:se(d(),q(d())),maxTurns:A(),currentAgentSpan:Ks.nullable().optional(),noActiveAgentRun:jt(),inputGuardrailResults:q(gu),outputGuardrailResults:q(_u),currentStep:cu.optional(),lastModelResponse:ta.optional(),generatedItems:q(na),lastProcessedResponse:mu.optional(),trace:hu.nullable()});class nt{constructor(e,t,r,s){_(this,"_currentTurn",0);_(this,"_currentAgent");_(this,"_originalInput");_(this,"_modelResponses");_(this,"_currentAgentSpan");_(this,"_context");_(this,"_toolUseTracker");_(this,"_generatedItems");_(this,"_maxTurns");_(this,"_noActiveAgentRun",!0);_(this,"_lastTurnResponse");_(this,"_inputGuardrailResults");_(this,"_outputGuardrailResults");_(this,"_currentStep");_(this,"_lastProcessedResponse");_(this,"_trace",null);this._context=e,this._originalInput=structuredClone(t),this._modelResponses=[],this._currentAgentSpan=void 0,this._currentAgent=r,this._toolUseTracker=new Qs,this._generatedItems=[],this._maxTurns=s,this._inputGuardrailResults=[],this._outputGuardrailResults=[],this._trace=Mt()}approve(e,t={alwaysApprove:!1}){this._context.approveTool(e,t)}reject(e,t={alwaysReject:!1}){this._context.rejectTool(e,t)}toJSON(){var r;const e={$schemaVersion:$n,currentTurn:this._currentTurn,currentAgent:{name:this._currentAgent.name},originalInput:this._originalInput,modelResponses:this._modelResponses.map(s=>({usage:{requests:s.usage.requests,inputTokens:s.usage.inputTokens,outputTokens:s.usage.outputTokens,totalTokens:s.usage.totalTokens},output:s.output,responseId:s.responseId})),context:this._context.toJSON(),toolUseTracker:this._toolUseTracker.toJSON(),maxTurns:this._maxTurns,currentAgentSpan:(r=this._currentAgentSpan)==null?void 0:r.toJSON(),noActiveAgentRun:this._noActiveAgentRun,inputGuardrailResults:this._inputGuardrailResults,outputGuardrailResults:this._outputGuardrailResults.map(s=>({...s,agent:s.agent.toJSON()})),currentStep:this._currentStep,lastModelResponse:this._lastTurnResponse,generatedItems:this._generatedItems.map(s=>s.toJSON()),lastProcessedResponse:this._lastProcessedResponse,trace:this._trace?this._trace.toJSON():null},t=sa.safeParse(e);if(!t.success)throw new bi(`Failed to serialize run state. ${t.error.message}`);return t.data}toString(){return JSON.stringify(this.toJSON())}static async fromString(e,t){var f,m,T,w,b;const[r,s]=await Gn(()=>JSON.parse(t));if(r)throw new K(`Failed to parse run state. ${r instanceof Error?r.message:String(r)}`);const a=s.$schemaVersion;if(!a)throw new K("Run state is missing schema version");if(a!==$n)throw new K(`Run state schema version ${a} is not supported. Please use version ${$n}`);const i=sa.parse(JSON.parse(t)),o=yu(e),c=new mt(i.context.context);c._rebuildApprovals(i.context.approvals);const p=o.get(i.currentAgent.name);if(!p)throw new K(`Agent ${i.currentAgent.name} not found`);const l=new nt(c,"",p,i.maxTurns);l._currentTurn=i.currentTurn,l._toolUseTracker=new Qs;for(const[O,R]of Object.entries(i.toolUseTracker))l._toolUseTracker.addToolUse(o.get(O),R);if(i.currentAgentSpan){i.trace||C.warn("Trace is not set, skipping tracing setup");const O=ke().createTrace({traceId:(f=i.trace)==null?void 0:f.id,name:(m=i.trace)==null?void 0:m.workflow_name,groupId:((T=i.trace)==null?void 0:T.group_id)??void 0,metadata:(w=i.trace)==null?void 0:w.metadata});l._currentAgentSpan=aa(O,i.currentAgentSpan),l._trace=O}return l._noActiveAgentRun=i.noActiveAgentRun,l._inputGuardrailResults=i.inputGuardrailResults,l._outputGuardrailResults=i.outputGuardrailResults.map(O=>({...O,agent:o.get(O.agent.name)})),l._currentStep=i.currentStep,l._originalInput=i.originalInput,l._modelResponses=i.modelResponses.map(ia),l._lastTurnResponse=i.lastModelResponse?ia(i.lastModelResponse):void 0,l._generatedItems=i.generatedItems.map(O=>oa(O,o)),l._lastProcessedResponse=i.lastProcessedResponse?await vu(o,l._currentAgent,i.lastProcessedResponse):void 0,((b=i.currentStep)==null?void 0:b.type)==="next_step_handoff"&&(l._currentStep={type:"next_step_handoff",newAgent:o.get(i.currentStep.newAgent.name)}),l}}function yu(n){const e=new Map,t=[n];for(;t.length>0;){const r=t.shift();if(!e.has(r.name)){e.set(r.name,r);for(const s of r.handoffs)s instanceof _t?e.has(s.name)||t.push(s):s.agent&&(e.has(s.agent.name)||t.push(s.agent))}}return e}function aa(n,e){const t=e.span_data,r=e.previous_span?aa(n,e.previous_span):void 0,s=ke().createSpan({spanId:e.id,traceId:e.trace_id,parentId:e.parent_id??void 0,startedAt:e.started_at??void 0,endedAt:e.ended_at??void 0,data:t},n);return s.previousSpan=r,s}function ia(n){const e=new Pn;return e.requests=n.usage.requests,e.inputTokens=n.usage.inputTokens,e.outputTokens=n.usage.outputTokens,e.totalTokens=n.usage.totalTokens,{usage:e,output:n.output.map(t=>wr.parse(t)),responseId:n.responseId}}function oa(n,e){switch(n.type){case"message_output_item":return new jn(n.rawItem,e.get(n.agent.name));case"tool_call_item":return new tt(n.rawItem,e.get(n.agent.name));case"tool_call_output_item":return new gt(n.rawItem,e.get(n.agent.name),n.output);case"reasoning_item":return new br(n.rawItem,e.get(n.agent.name));case"handoff_call_item":return new xr(n.rawItem,e.get(n.agent.name));case"handoff_output_item":return new Sr(n.rawItem,e.get(n.sourceAgent.name),e.get(n.targetAgent.name));case"tool_approval_item":return new Ie(n.rawItem,e.get(n.agent.name))}}async function vu(n,e,t){const r=await e.getAllTools(),s=new Map(r.filter(c=>c.type==="function").map(c=>[c.name,c])),a=new Map(r.filter(c=>c.type==="computer").map(c=>[c.name,c])),i=new Map(e.handoffs.map(c=>c instanceof _t?[c.name,Ds(c)]:[c.toolName,c])),o={newItems:t.newItems.map(c=>oa(c,n)),toolsUsed:t.toolsUsed,handoffs:t.handoffs.map(c=>{if(!i.has(c.handoff.toolName))throw new K(`Handoff ${c.handoff.toolName} not found`);return{toolCall:c.toolCall,handoff:i.get(c.handoff.toolName)}}),functions:await Promise.all(t.functions.map(async c=>{if(!s.has(c.tool.name))throw new K(`Tool ${c.tool.name} not found`);return{toolCall:c.toolCall,tool:s.get(c.tool.name)}})),computerActions:t.computerActions.map(c=>{const p=c.computer.name;if(!a.has(p))throw new K(`Computer tool ${p} not found`);return{toolCall:c.toolCall,computer:a.get(p)}}),mcpApprovalRequests:(t.mcpApprovalRequests??[]).map(c=>({requestItem:new Ie(c.requestItem.rawItem,e),mcpTool:c.mcpTool}))};return{...o,hasToolsOrApprovalsToRun(){return o.handoffs.length>0||o.functions.length>0||o.mcpApprovalRequests.length>0||o.computerActions.length>0}}}const ua=10;function ca(n,e){return n?!1:e?!0:"enabled_without_data"}function Fn(n,e){const t=e.map(r=>r.rawItem);return typeof n=="string"&&(n=[{type:"message",role:"user",content:n}]),[...n,...t]}class wu extends Zo{constructor(t={}){super();k(this,ie);_(this,"config");_(this,"inputGuardrailDefs");_(this,"outputGuardrailDefs");this.config={modelProvider:t.modelProvider??Lo(),model:t.model,modelSettings:t.modelSettings,handoffInputFilter:t.handoffInputFilter,inputGuardrails:t.inputGuardrails,outputGuardrails:t.outputGuardrails,tracingDisabled:t.tracingDisabled??!1,traceIncludeSensitiveData:t.traceIncludeSensitiveData??!0,workflowName:t.workflowName??"Agent workflow",traceId:t.traceId,groupId:t.groupId,traceMetadata:t.traceMetadata},this.inputGuardrailDefs=(t.inputGuardrails??[]).map(Es),this.outputGuardrailDefs=(t.outputGuardrails??[]).map(hr)}run(t,r,s={stream:!1,context:void 0}){return r instanceof nt&&r._trace?vo(r._trace,async()=>(r._currentAgentSpan&&En(r._currentAgentSpan),s!=null&&s.stream?F(this,ie,jr).call(this,t,r,s):F(this,ie,Rr).call(this,t,r,s))):wo(async()=>s!=null&&s.stream?F(this,ie,jr).call(this,t,r,s):F(this,ie,Rr).call(this,t,r,s))}}ie=new WeakSet,Rr=async function(t,r,s){return ur(async()=>{var i,o;const a=r instanceof nt?r:new nt(s.context instanceof mt?s.context:new mt(s.context),r,t,s.maxTurns??ua);try{for(;;){let c=a._currentAgent.model??this.config.model;if(typeof c=="string"&&(c=await this.config.modelProvider.getModel(c)),a._currentStep=a._currentStep??{type:"next_step_run_again"},a._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!a._lastTurnResponse||!a._lastProcessedResponse)throw new K("No model response found in previous state",a);const p=await zs(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=p.originalInput,a._generatedItems=p.generatedItems,a._currentStep=p.nextStep;continue}if(a._currentStep.type==="next_step_run_again"){const p=a._currentAgent.handoffs.map(Rn);if(!a._currentAgentSpan){const R=p.map(H=>H.agentName);a._currentAgentSpan=As({data:{name:a._currentAgent.name,handoffs:R,output_type:a._currentAgent.outputSchemaName}}),a._currentAgentSpan.start(),En(a._currentAgentSpan)}const l=await a._currentAgent.getAllTools(),f=l.map(R=>Js(R)),m=p.map(R=>Bs(R));if(a._currentAgentSpan&&(a._currentAgentSpan.spanData.tools=l.map(R=>R.name)),a._currentTurn++,a._currentTurn>a._maxTurns)throw(i=a._currentAgentSpan)==null||i.setError({message:"Max turns exceeded",data:{max_turns:a._maxTurns}}),new Yr(`Max turns (${a._maxTurns}) exceeded`,a);C.debug(`Running agent ${a._currentAgent.name} (turn ${a._currentTurn})`),a._currentTurn===1&&await F(this,ie,Dr).call(this,a);const T=Fn(a._originalInput,a._generatedItems);a._noActiveAgentRun&&(a._currentAgent.emit("agent_start",a._context,a._currentAgent),this.emit("agent_start",a._context,a._currentAgent));let w={...this.config.modelSettings,...a._currentAgent.modelSettings};w=Vs(a._currentAgent,a._toolUseTracker,w),a._lastTurnResponse=await c.getResponse({systemInstructions:await a._currentAgent.getSystemPrompt(a._context),input:T,previousResponseId:s.previousResponseId,modelSettings:w,tools:f,outputType:Kr(a._currentAgent.outputType),handoffs:m,tracing:ca(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:s.signal}),a._modelResponses.push(a._lastTurnResponse),a._context.usage.add(a._lastTurnResponse.usage),a._noActiveAgentRun=!1;const b=Gs(a._lastTurnResponse,a._currentAgent,l,p);a._lastProcessedResponse=b;const O=await Ws(a._currentAgent,a._originalInput,a._generatedItems,a._lastTurnResponse,a._lastProcessedResponse,this,a);a._toolUseTracker.addToolUse(a._currentAgent,a._lastProcessedResponse.toolsUsed),a._originalInput=O.originalInput,a._generatedItems=O.generatedItems,a._currentStep=O.nextStep}if(a._currentStep&&a._currentStep.type==="next_step_final_output")return await F(this,ie,Pr).call(this,a,a._currentStep.output),this.emit("agent_end",a._context,a._currentAgent,a._currentStep.output),a._currentAgent.emit("agent_end",a._context,a._currentStep.output),new Us(a);if(a._currentStep&&a._currentStep.type==="next_step_handoff")a._currentAgent=a._currentStep.newAgent,a._currentAgentSpan&&(a._currentAgentSpan.end(),$t(),a._currentAgentSpan=void 0),a._noActiveAgentRun=!0,a._currentStep={type:"next_step_run_again"};else{if(a._currentStep&&a._currentStep.type==="next_step_interruption")return new Us(a);C.debug("Running next loop")}}}catch(c){throw a._currentAgentSpan&&a._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(c)}}),c}finally{a._currentAgentSpan&&(((o=a._currentStep)==null?void 0:o.type)!=="next_step_interruption"&&a._currentAgentSpan.end(),$t())}})},Dr=async function(t){const r=this.inputGuardrailDefs.concat(t._currentAgent.inputGuardrails.map(Es));if(r.length>0){const s={agent:t._currentAgent,input:t._originalInput,context:t._context};try{const a=await Promise.all(r.map(async i=>Os(async o=>{const c=await i.run(s);return o.spanData.triggered=c.output.tripwireTriggered,c},{data:{name:i.name}},t._currentAgentSpan)));for(const i of a)if(i.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:i.guardrail.name}}),new Qr(`Input guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i,t)}catch(a){throw a instanceof Qr?a:(t._currentTurn--,new Xr(`Input guardrail failed to complete: ${a}`,a,t))}}},Pr=async function(t,r){const s=this.outputGuardrailDefs.concat(t._currentAgent.outputGuardrails.map(hr));if(s.length>0){const a=t._currentAgent.processFinalOutput(r),i={agent:t._currentAgent,agentOutput:a,context:t._context};try{const o=await Promise.all(s.map(async c=>Os(async p=>{const l=await c.run(i);return p.spanData.triggered=l.output.tripwireTriggered,l},{data:{name:c.name}},t._currentAgentSpan)));for(const c of o)if(c.output.tripwireTriggered)throw t._currentAgentSpan&&t._currentAgentSpan.setError({message:"Guardrail tripwire triggered",data:{guardrail:c.guardrail.name}}),new hn(`Output guardrail triggered: ${JSON.stringify(c.output.outputInfo)}`,c,t)}catch(o){throw o instanceof hn?o:new Xr(`Output guardrail failed to complete: ${o}`,o,t)}}},ba=async function(t,r){var s,a,i;try{for(;;){const o=t.state._currentAgent,c=o.handoffs.map(Rn),p=await o.getAllTools(),l=p.map(m=>Js(m)),f=c.map(m=>Bs(m));if(t.state._currentStep=t.state._currentStep??{type:"next_step_run_again"},t.state._currentStep.type==="next_step_interruption"){if(C.debug("Continuing from interruption"),!t.state._lastTurnResponse||!t.state._lastProcessedResponse)throw new K("No model response found in previous state",t.state);const m=await zs(t.state._currentAgent,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);Xs(t,m),t.state._toolUseTracker.addToolUse(t.state._currentAgent,t.state._lastProcessedResponse.toolsUsed),t.state._originalInput=m.originalInput,t.state._generatedItems=m.generatedItems,t.state._currentStep=m.nextStep;continue}if(t.state._currentStep.type==="next_step_run_again"){if(!t.state._currentAgentSpan){const H=c.map(te=>te.agentName);t.state._currentAgentSpan=As({data:{name:o.name,handoffs:H,tools:p.map(te=>te.name),output_type:o.outputSchemaName}}),t.state._currentAgentSpan.start(),En(t.state._currentAgentSpan)}if(t.state._currentTurn++,t.state._currentTurn>t.state._maxTurns)throw(s=t.state._currentAgentSpan)==null||s.setError({message:"Max turns exceeded",data:{max_turns:t.state._maxTurns}}),new Yr(`Max turns (${t.state._maxTurns}) exceeded`,t.state);C.debug(`Running agent ${o.name} (turn ${t.state._currentTurn})`);let m=o.model??this.config.model;typeof m=="string"&&(m=await this.config.modelProvider.getModel(m)),t.state._currentTurn===1&&await F(this,ie,Dr).call(this,t.state);let T={...this.config.modelSettings,...o.modelSettings};T=Vs(o,t.state._toolUseTracker,T);const w=Fn(t.input,t.newItems);t.state._noActiveAgentRun&&(o.emit("agent_start",t.state._context,o),this.emit("agent_start",t.state._context,o));let b;for await(const H of m.getStreamedResponse({systemInstructions:await o.getSystemPrompt(t.state._context),input:w,previousResponseId:r.previousResponseId,modelSettings:T,tools:l,handoffs:f,outputType:Kr(o.outputType),tracing:ca(this.config.tracingDisabled,this.config.traceIncludeSensitiveData),signal:r.signal})){if(H.type==="response_done"){const te=Fs.parse(H);b={usage:new Pn(te.response.usage),output:te.response.output,responseId:te.response.id}}if(t.cancelled)return;t._addItem(new iu(H))}if(t.state._noActiveAgentRun=!1,!b)throw new de("Model did not procude a final response!",t.state);t.state._lastTurnResponse=b,t.state._modelResponses.push(t.state._lastTurnResponse);const O=Gs(t.state._lastTurnResponse,o,p,c);t.state._lastProcessedResponse=O;const R=await Ws(o,t.state._originalInput,t.state._generatedItems,t.state._lastTurnResponse,t.state._lastProcessedResponse,this,t.state);Xs(t,R),t.state._toolUseTracker.addToolUse(o,O.toolsUsed),t.state._originalInput=R.originalInput,t.state._generatedItems=R.generatedItems,t.state._currentStep=R.nextStep}if(t.state._currentStep.type==="next_step_final_output"){await F(this,ie,Pr).call(this,t.state,t.state._currentStep.output);return}else{if(t.state._currentStep.type==="next_step_interruption")return;t.state._currentStep.type==="next_step_handoff"?(t.state._currentAgent=(a=t.state._currentStep)==null?void 0:a.newAgent,t.state._currentAgentSpan&&(t.state._currentAgentSpan.end(),$t()),t.state._currentAgentSpan=void 0,t._addItem(new uu(o)),t.state._noActiveAgentRun=!0,t.state._currentStep={type:"next_step_run_again"}):C.debug("Running next loop")}}}catch(o){throw t.state._currentAgentSpan&&t.state._currentAgentSpan.setError({message:"Error in agent run",data:{error:String(o)}}),o}finally{t.state._currentAgentSpan&&(((i=t.state._currentStep)==null?void 0:i.type)!=="next_step_interruption"&&t.state._currentAgentSpan.end(),$t())}},jr=async function(t,r,s){return s=s??{},ur(async()=>{const a=r instanceof nt?r:new nt(s.context instanceof mt?s.context:new mt(s.context),r,t,s.maxTurns??ua),i=new su({signal:s.signal,state:a});return i.maxTurns=s.maxTurns??a._maxTurns,F(this,ie,ba).call(this,i,s).then(()=>{i._done()},o=>{i._raiseError(o)}),i})};class _t extends Mo{constructor(t){super();_(this,"name");_(this,"instructions");_(this,"handoffDescription");_(this,"handoffs");_(this,"model");_(this,"modelSettings");_(this,"tools");_(this,"mcpServers");_(this,"inputGuardrails");_(this,"outputGuardrails");_(this,"outputType","text");_(this,"toolUseBehavior");_(this,"resetToolChoice");if(typeof t.name!="string"||t.name.trim()==="")throw new K("Agent must have a name.");if(this.name=t.name,this.instructions=t.instructions??"",this.handoffDescription=t.handoffDescription??"",this.handoffs=t.handoffs??[],this.model=t.model??"",this.modelSettings=t.modelSettings??{},this.tools=t.tools??[],this.mcpServers=t.mcpServers??[],this.inputGuardrails=t.inputGuardrails??[],this.outputGuardrails=t.outputGuardrails??[],t.outputType&&(this.outputType=t.outputType),this.toolUseBehavior=t.toolUseBehavior??"run_llm_again",this.resetToolChoice=t.resetToolChoice??!0,(t.handoffOutputTypeWarningEnabled===void 0||t.handoffOutputTypeWarningEnabled)&&this.handoffs&&this.outputType){const r=new Set([JSON.stringify(this.outputType)]);for(const s of this.handoffs)"outputType"in s&&s.outputType?r.add(JSON.stringify(s.outputType)):"agent"in s&&s.agent.outputType&&r.add(JSON.stringify(s.agent.outputType));r.size>1&&C.warn(`[Agent] Warning: Handoff agents have different output types: ${Array.from(r).join(", ")}. You can make it type-safe by using Agent.create({ ... }) method instead.`)}}static create(t){return new _t({...t,handoffs:t.handoffs,outputType:t.outputType,handoffOutputTypeWarningEnabled:!1})}get outputSchemaName(){if(this.outputType==="text")return"text";if(ze(this.outputType))return"ZodOutput";if(typeof this.outputType=="object")return this.outputType.name;throw new Error(`Unknown output type: ${this.outputType}`)}clone(t){return new _t({...this,...t})}asTool(t){const{toolName:r,toolDescription:s,customOutputExtractor:a}=t;return _n({name:r??mn(this.name),description:s??"",parameters:{type:"object",properties:{input:{type:"string"}},required:["input"],additionalProperties:!1},strict:!0,execute:async(i,o)=>{if(!Si(i))throw new de("Agent tool called with invalid input");const p=await new wu().run(this,i.input,{context:o==null?void 0:o.context});return typeof a=="function"?a(p):au(p.rawResponses[p.rawResponses.length-1])}})}async getSystemPrompt(t){return typeof this.instructions=="function"?await this.instructions(t,this):this.instructions}async getMcpTools(){return this.mcpServers.length>0?uo(this.mcpServers):[]}async getAllTools(){return[...await this.getMcpTools(),...this.tools]}processFinalOutput(t){if(this.outputType==="text")return t;if(typeof this.outputType=="object"){const r=JSON.parse(t);return ze(this.outputType)?this.outputType.parse(r):r}throw new Error(`Unknown output type: ${this.outputType}`)}toJSON(){return{name:this.name}}}jo(Ts());class bu extends _t{constructor(t){super(t);_(this,"voice");this.voice=t.voice??"ash"}}function xu(n){return{debounceTextLength:n.debounceTextLength??100}}function Su({policyHint:n,...e}){const t=hr(e),r=n??t.name;return{...t,policyHint:r,run:async s=>{const a=await t.run(s);return{...a,guardrail:{...a.guardrail,policyHint:r}}}}}function Tu(n){return`
⚠️ Your last answer was blocked. 
Failed Guardrail Reason: ${n.guardrail.policyHint}. 
Failure Details: ${JSON.stringify(n.output.outputInfo??{})}. 
Please respond again following policy. Apologize for not being able to answer the question (while avoiding the specific reason) and divert discussion back to an approved topic immediately and not invite more discussion.
`.trim()}const Re=is("openai-agents:realtime");g({itemId:d()});const da=le("role",[g({itemId:d(),previousItemId:d().nullable().optional(),type:h("message"),role:h("system"),content:q(g({type:h("input_text"),text:d()}))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:h("message"),role:h("user"),status:ue(["in_progress","completed"]),content:q(g({type:h("input_text"),text:d()}).or(g({type:h("input_audio"),audio:d().nullable().optional(),transcript:d().nullable()})))}),g({itemId:d(),previousItemId:d().nullable().optional(),type:h("message"),role:h("assistant"),status:ue(["in_progress","completed","incomplete"]),content:q(g({type:h("text"),text:d()}).or(g({type:h("audio"),audio:d().nullable().optional(),transcript:d().nullable().optional()})))})]),la=g({itemId:d(),previousItemId:d().nullable().optional(),type:h("function_call"),status:ue(["in_progress","completed"]),arguments:d(),name:d(),output:d().nullable()}),pa=g({id:d().optional().nullable(),conversation_id:d().optional().nullable(),max_output_tokens:A().or(h("inf")).optional().nullable(),metadata:se(d(),J()).optional().nullable(),modalities:q(d()).optional().nullable(),object:h("realtime.response").optional().nullable(),output:q(J()).optional().nullable(),output_audio_format:d().optional().nullable(),status:ue(["completed","incomplete","failed","cancelled","in_progress"]).optional().nullable(),status_details:se(d(),J()).optional().nullable(),usage:g({input_tokens:A().optional(),input_tokens_details:se(d(),J()).optional().nullable(),output_tokens:A().optional(),output_tokens_details:se(d(),J()).optional().nullable()}).optional().nullable(),voice:d().optional().nullable()}),ku=g({id:d().optional(),audio:d().nullable().optional(),text:d().nullable().optional(),transcript:d().nullable().optional(),type:ws([h("input_text"),h("input_audio"),h("item_reference"),h("text"),h("audio")])}),Bt=g({id:d().optional(),arguments:d().optional(),call_id:d().optional(),content:q(ku).optional(),name:d().optional(),object:h("realtime.item").optional(),output:d().optional(),role:ue(["user","assistant","system"]).optional(),status:ue(["completed","incomplete","in_progress"]).optional(),type:ue(["message","function_call","function_call_output"]).optional()}),Iu=g({type:h("conversation.created"),event_id:d(),conversation:g({id:d().optional(),object:h("realtime.conversation").optional()})}),Au=g({type:h("conversation.item.created"),event_id:d(),item:Bt,previous_item_id:d().nullable().optional()}),Cu=g({type:h("conversation.item.deleted"),event_id:d(),item_id:d()}),Ou=g({type:h("conversation.item.input_audio_transcription.completed"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),logprobs:q(J()).nullable().optional()}),Eu=g({type:h("conversation.item.input_audio_transcription.delta"),event_id:d(),item_id:d(),content_index:A().optional(),delta:d().optional(),logprobs:q(J()).nullable().optional()}),Nu=g({type:h("conversation.item.input_audio_transcription.failed"),event_id:d(),item_id:d(),content_index:A(),error:g({code:d().optional(),message:d().optional(),param:d().optional(),type:d().optional()})}),Ru=g({type:h("conversation.item.retrieved"),event_id:d(),item:Bt}),Du=g({type:h("conversation.item.truncated"),event_id:d(),item_id:d(),audio_end_ms:A(),content_index:A()}),Pu=g({type:h("conversation.item.create"),item:Bt,event_id:d().optional(),previous_item_id:d().nullable().optional()}),ju=g({type:h("conversation.item.delete"),item_id:d(),event_id:d().optional()}),Mu=g({type:h("conversation.item.retrieve"),item_id:d(),event_id:d().optional()}),Zu=g({type:h("conversation.item.truncate"),item_id:d(),audio_end_ms:A(),content_index:A(),event_id:d().optional()}),$u=g({type:h("error"),event_id:d().optional(),error:J().optional()}),Fu=g({type:h("input_audio_buffer.cleared"),event_id:d()}),Lu=g({type:h("input_audio_buffer.append"),audio:d(),event_id:d().optional()}),Uu=g({type:h("input_audio_buffer.clear"),event_id:d().optional()}),Ju=g({type:h("input_audio_buffer.commit"),event_id:d().optional()}),Bu=g({type:h("input_audio_buffer.committed"),event_id:d(),item_id:d(),previous_item_id:d().nullable().optional()}),qu=g({type:h("input_audio_buffer.speech_started"),event_id:d(),item_id:d(),audio_start_ms:A()}),Gu=g({type:h("input_audio_buffer.speech_stopped"),event_id:d(),item_id:d(),audio_end_ms:A()}),Vu=g({type:h("output_audio_buffer.started"),event_id:d()}).passthrough(),zu=g({type:h("output_audio_buffer.stopped"),event_id:d()}).passthrough(),Wu=g({type:h("output_audio_buffer.cleared"),event_id:d()}),Hu=g({type:h("rate_limits.updated"),event_id:d(),rate_limits:q(g({limit:A().optional(),name:ue(["requests","tokens"]).optional(),remaining:A().optional(),reset_seconds:A().optional()}))}),Yu=g({type:h("response.audio.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Xu=g({type:h("response.audio.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d()}),Qu=g({type:h("response.audio_transcript.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),Ku=g({type:h("response.audio_transcript.done"),event_id:d(),item_id:d(),content_index:A(),transcript:d(),output_index:A(),response_id:d()}),ec=g({type:h("response.content_part.added"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:ue(["text","audio"]).optional()})}),tc=g({type:h("response.content_part.done"),event_id:d(),item_id:d(),content_index:A(),output_index:A(),response_id:d(),part:g({audio:d().optional(),text:d().optional(),transcript:d().optional(),type:ue(["text","audio"]).optional()})}),nc=g({type:h("response.created"),event_id:d(),response:pa}),fa=g({type:h("response.done"),event_id:d(),response:pa}),rc=g({type:h("response.function_call_arguments.delta"),event_id:d(),item_id:d(),call_id:d(),delta:d(),output_index:A(),response_id:d()}),sc=g({type:h("response.function_call_arguments.done"),event_id:d(),item_id:d(),call_id:d(),arguments:d(),output_index:A(),response_id:d()}),ac=g({type:h("response.output_item.added"),event_id:d(),item:Bt,output_index:A(),response_id:d()}),ic=g({type:h("response.output_item.done"),event_id:d(),item:Bt,output_index:A(),response_id:d()}),oc=g({type:h("response.text.delta"),event_id:d(),item_id:d(),content_index:A(),delta:d(),output_index:A(),response_id:d()}),uc=g({type:h("response.text.done"),event_id:d(),item_id:d(),content_index:A(),text:d(),output_index:A(),response_id:d()}),cc=g({type:h("session.created"),event_id:d(),session:J()}),dc=g({type:h("session.updated"),event_id:d(),session:J()}),lc=g({type:h("response.cancel"),event_id:d().optional(),response_id:d().optional()}),pc=g({type:h("response.create"),event_id:d().optional(),response:J().optional()}),fc=g({type:h("session.update"),event_id:d().optional(),session:J()}),hc=g({type:h("transcription_session.update"),event_id:d().optional(),session:J()}),mc=g({type:h("transcription_session.updated"),event_id:d(),session:J()}),gc=g({type:d(),event_id:d().optional().nullable()}).passthrough(),_c=le("type",[Iu,Au,Cu,Ou,Eu,Nu,Ru,Du,$u,Fu,Bu,qu,Gu,Vu,zu,Wu,Hu,Yu,Xu,Qu,Ku,ec,tc,nc,fa,rc,sc,ac,ic,oc,uc,cc,dc,mc]);le("type",[Pu,ju,Mu,Zu,Lu,Uu,Ju,lc,pc,fc,hc]);function Tr(n){const e=JSON.parse(n.data.toString()),t=_c.safeParse(e);if(!t.success){const r=gc.safeParse(e);return r.success?{data:r.data,isGeneric:!0}:{data:null,isGeneric:!0}}return{data:t.data,isGeneric:!1}}const ha="gpt-4o-realtime-preview",De={voice:"ash",modalities:["text","audio"],inputAudioFormat:"pcm16",outputAudioFormat:"pcm16",inputAudioTranscription:{model:"gpt-4o-mini-transcribe"},turnDetection:{type:"semantic_vad"}};class kr extends fr{constructor(t={}){super();k(this,it);k(this,rn);k(this,he,null);_(this,"eventEmitter",new On);y(this,it,t.model??ha),y(this,rn,t.apiKey)}get currentModel(){return u(this,it)}set currentModel(t){y(this,it,t)}async _getApiKey(t){const r=t.apiKey??u(this,rn);return typeof r=="function"?await r():r}_onMessage(t){var a,i,o,c,p,l;const{data:r,isGeneric:s}=Tr(t);if(r!==null&&(this.emit("*",r),!s)){if(r.type==="error"?this.emit("error",{type:"error",error:r}):this.emit(r.type,r),r.type==="response.created"){this.emit("turn_started",{type:"response_started",providerData:{...r}});return}if(r.type==="response.done"){const f=fa.safeParse(r);if(!f.success){Re.error("Error parsing response done event",f.error);return}const m=((a=f.data.response.usage)==null?void 0:a.input_tokens)??0,T=((i=f.data.response.usage)==null?void 0:i.output_tokens)??0,w=m+T,b=new Pn({inputTokens:m,inputTokensDetails:((o=f.data.response.usage)==null?void 0:o.input_tokens_details)??{},outputTokens:T,outputTokensDetails:((c=f.data.response.usage)==null?void 0:c.output_tokens_details)??{},totalTokens:w});this.emit("usage_update",b),this.emit("turn_done",{type:"response_done",response:{id:f.data.response.id??"",output:f.data.response.output??[],usage:{inputTokens:m,inputTokensDetails:((p=f.data.response.usage)==null?void 0:p.input_tokens_details)??{},outputTokens:T,outputTokensDetails:((l=f.data.response.usage)==null?void 0:l.output_tokens_details)??{},totalTokens:w}}});return}if(r.type==="response.audio.done"){this.emit("audio_done");return}if(r.type==="conversation.item.deleted"){this.emit("item_deleted",{itemId:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.completed"||r.type==="conversation.item.truncated"){this.sendEvent({type:"conversation.item.retrieve",item_id:r.item_id});return}if(r.type==="conversation.item.input_audio_transcription.delta"||r.type==="response.text.delta"||r.type==="response.audio_transcript.delta"||r.type==="response.function_call_arguments.delta"){r.type==="response.audio_transcript.delta"&&this.emit("audio_transcript_delta",{type:"transcript_delta",delta:r.delta,itemId:r.item_id,responseId:r.response_id});return}if((r.type==="conversation.item.created"||r.type==="conversation.item.retrieved")&&r.item.type==="message"){const f=r.type==="conversation.item.created"?r.previous_item_id:null,m=da.parse({itemId:r.item.id,previousItemId:f,type:r.item.type,role:r.item.role,content:r.item.content,status:r.item.status});this.emit("item_update",m);return}if(r.type==="response.output_item.done"||r.type==="response.output_item.added"){const f=r.item;if(f.type==="function_call"&&f.status==="completed"){const m=la.parse({itemId:f.id,type:f.type,status:"in_progress",arguments:f.arguments,name:f.name,output:null});this.emit("item_update",m),this.emit("function_call",{id:f.id,type:"function_call",callId:f.call_id??"",arguments:f.arguments??"",name:f.name??""});return}if(f.type==="message"){const m=da.parse({itemId:r.item.id,type:r.item.type,role:r.item.role,content:r.item.content,status:"in_progress"});this.emit("item_update",m);return}}}}_onError(t){this.emit("error",{type:"error",error:t})}_onOpen(){this.emit("connected")}_onClose(){this.emit("disconnected")}sendMessage(t,r){this.sendEvent({type:"conversation.item.create",item:typeof t=="string"?{type:"message",role:"user",content:[{type:"input_text",text:t}]}:t,...r}),this.sendEvent({type:"response.create"})}_getMergedSessionConfig(t){var s;return{instructions:t.instructions,model:t.model??u(this,it)??De.model,voice:t.voice??De.voice,modalities:t.modalities??De.modalities,input_audio_format:t.inputAudioFormat??De.inputAudioFormat,output_audio_format:t.outputAudioFormat??De.outputAudioFormat,input_audio_transcription:t.inputAudioTranscription??De.inputAudioTranscription,turn_detection:t.turnDetection??De.turnDetection,tool_choice:t.toolChoice??De.toolChoice,tools:(s=t.tools)==null?void 0:s.map(a=>({...a,strict:void 0})),...t.providerData??{}}}set _tracingConfig(t){y(this,he,t)}_updateTracingConfig(t){var r,s,a;if(typeof u(this,he)>"u"&&y(this,he,null),t==="auto"){this.sendEvent({type:"session.update",session:{tracing:"auto"}});return}if(typeof u(this,he)!="string"&&typeof t!="string"){Re.warn("Tracing config is already set, skipping setting it again. This likely happens when you already set a tracing config on session creation.");return}if(t===null){Re.debug("Disabling tracing for this session. It cannot be turned on for this session from this point on."),this.sendEvent({type:"session.update",session:{tracing:null}});return}if(u(this,he)===null||typeof u(this,he)=="string"){this.sendEvent({type:"session.update",session:{tracing:t}});return}if((t==null?void 0:t.group_id)!==((r=u(this,he))==null?void 0:r.group_id)||(t==null?void 0:t.metadata)!==((s=u(this,he))==null?void 0:s.metadata)||(t==null?void 0:t.workflow_name)!==((a=u(this,he))==null?void 0:a.workflow_name)){Re.warn("Mismatch in tracing config. Ignoring the new tracing config. This likely happens when you already set a tracing config on session creation. Current tracing config: %s, new tracing config: %s",JSON.stringify(u(this,he)),JSON.stringify(t));return}this.sendEvent({type:"session.update",session:{tracing:t}})}updateSessionConfig(t){const r=this._getMergedSessionConfig(t);this.sendEvent({type:"session.update",session:r})}sendFunctionCallOutput(t,r,s=!0){this.sendEvent({type:"conversation.item.create",item:{type:"function_call_output",output:r,call_id:t.callId}});try{const a=la.parse({itemId:t.id,previousItemId:t.previousItemId,type:"function_call",status:"completed",arguments:t.arguments,name:t.name,output:r});this.emit("item_update",a)}catch(a){Re.error("Error parsing tool call item",a,t)}s&&this.sendEvent({type:"response.create"})}sendAudio(t,{commit:r=!1}={}){this.sendEvent({type:"input_audio_buffer.append",audio:Et(t)}),r&&this.sendEvent({type:"input_audio_buffer.commit"})}resetHistory(t,r){const{removals:s,additions:a,updates:i}=Ia(t,r),o=new Set(s.map(p=>p.itemId));for(const p of i)o.add(p.itemId);if(o.size>0)for(const p of o)this.sendEvent({type:"conversation.item.delete",item_id:p});const c=[...a,...i];for(const p of c)if(p.type==="message"){const l={type:"message",role:p.role,content:p.content,id:p.itemId};p.role!=="system"&&p.status&&(l.status=p.status),this.sendEvent({type:"conversation.item.create",item:l})}else p.type==="function_call"&&Re.warn("Function calls cannot be manually added or updated at the moment. Ignoring.")}}it=new WeakMap,rn=new WeakMap,he=new WeakMap;class ma extends kr{constructor(t={}){if(typeof RTCPeerConnection>"u")throw new Error("WebRTC is not supported in this environment");super(t);_(this,"options");k(this,sn);k(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0});k(this,an);k(this,ot,!1);k(this,on,!1);this.options=t,y(this,sn,t.baseUrl??"https://api.openai.com/v1/realtime"),y(this,an,t.useInsecureApiKey??!1)}get status(){return u(this,z).status}get connectionState(){return u(this,z)}get muted(){return u(this,on)}async connect(t){if(u(this,z).status==="connected")return;u(this,z).status==="connecting"&&Re.warn("Realtime connection already in progress. Please await original promise");const r=t.model??this.currentModel;this.currentModel=r;const s=t.url??u(this,sn),a=await this._getApiKey(t),i=typeof a=="string"&&a.startsWith("ek_");if(!u(this,an)&&!i)throw new K("Using the WebRTC connection in a browser environment requires an insecure API key. Please use a WebSocket connection instead or set the useInsecureApiKey option to true.");return new Promise(async(o,c)=>{try{const p={...t.initialSessionConfig||{},model:this.currentModel},l=new URL(s);let f=new RTCPeerConnection;const m=f.createDataChannel("oai-events");y(this,z,{status:"connecting",peerConnection:f,dataChannel:m}),this.emit("connection_change",u(this,z).status),m.addEventListener("open",()=>{y(this,z,{status:"connected",peerConnection:f,dataChannel:m}),this.updateSessionConfig(p),this.emit("connection_change",u(this,z).status),this._onOpen(),o()}),m.addEventListener("error",me=>{this.close(),this._onError(me),c(me)}),m.addEventListener("message",me=>{this._onMessage(me);const{data:ge,isGeneric:pn}=Tr(me);!ge||pn||(ge.type==="response.created"?y(this,ot,!0):ge.type==="response.done"&&y(this,ot,!1),ge.type==="session.created"&&(this._tracingConfig=ge.session.tracing,this._updateTracingConfig(p.tracing??"auto")))});const T=this.options.audioElement??document.createElement("audio");T.autoplay=!0,f.ontrack=me=>{T.srcObject=me.streams[0]};const w=this.options.mediaStream??await navigator.mediaDevices.getUserMedia({audio:!0});f.addTrack(w.getAudioTracks()[0]),this.options.changePeerConnection&&(f=await this.options.changePeerConnection(f),y(this,z,{...u(this,z),peerConnection:f}));const b=await f.createOffer();if(await f.setLocalDescription(b),!b.sdp)throw new Error("Failed to create offer");const O={...this._getMergedSessionConfig(p),model:this.currentModel},R=new FormData;R.append("sdp",b.sdp),R.append("session",JSON.stringify(O));const te={type:"answer",sdp:await(await fetch(l,{method:"POST",body:R,headers:{Authorization:`Bearer ${a}`,"X-OpenAI-Agents-SDK":Oa["X-OpenAI-Agents-SDK"]}})).text()};await f.setRemoteDescription(te)}catch(p){this.close(),this._onError(p),c(p)}})}sendEvent(t){if(!u(this,z).dataChannel||u(this,z).dataChannel.readyState!=="open")throw new Error("WebRTC data channel is not connected. Make sure you call `connect()` before sending events.");u(this,z).dataChannel.send(JSON.stringify(t))}mute(t){y(this,on,t),u(this,z).peerConnection&&u(this,z).peerConnection.getSenders().forEach(s=>{s.track&&(s.track.enabled=!t)})}close(){if(u(this,z).dataChannel&&u(this,z).dataChannel.close(),u(this,z).peerConnection){const t=u(this,z).peerConnection;t.getSenders().forEach(r=>{var s;(s=r.track)==null||s.stop()}),t.close()}u(this,z).status!=="disconnected"&&(y(this,z,{status:"disconnected",peerConnection:void 0,dataChannel:void 0}),this.emit("connection_change",u(this,z).status),this._onClose())}interrupt(){u(this,ot)&&(this.sendEvent({type:"response.cancel"}),y(this,ot,!1)),this.sendEvent({type:"output_audio_buffer.clear"})}}sn=new WeakMap,z=new WeakMap,an=new WeakMap,ot=new WeakMap,on=new WeakMap;const yc=globalThis.WebSocket;class ga extends kr{constructor(t={}){super(t);k(this,Un);k(this,ut);k(this,kt);k(this,ee,{status:"disconnected",websocket:void 0});k(this,un);k(this,Me);k(this,ct);_(this,"_firstAudioTimestamp");_(this,"_audioLengthMs",0);k(this,dt,!1);y(this,kt,`wss://api.openai.com/v1/realtime?model=${this.currentModel}`),y(this,un,t.useInsecureApiKey??!1)}get status(){return u(this,ee).status}get connectionState(){return u(this,ee)}get muted(){return null}get currentItemId(){return u(this,Me)}_onAudio(t){this.emit("audio",t)}async connect(t){const r=t.model??this.currentModel;this.currentModel=r,y(this,ut,await this._getApiKey(t)),y(this,kt,t.url??`wss://api.openai.com/v1/realtime?model=${this.currentModel}`);const s={...t.initialSessionConfig||{},model:this.currentModel};await new Promise((a,i)=>{try{F(this,Un,xa).call(this,a,i,s)}catch(o){i(o)}}),await this.updateSessionConfig(s)}sendEvent(t){if(!u(this,ee).websocket)throw new Error("WebSocket is not connected. Make sure you call `connect()` before sending events.");u(this,ee).websocket.send(JSON.stringify(t))}close(){var t;(t=u(this,ee).websocket)==null||t.close(),y(this,Me,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,ct,void 0)}mute(t){throw new Error("Mute is not supported for the WebSocket transport. You have to mute the audio input yourself.")}sendAudio(t,r={}){u(this,ee).status==="connected"&&super.sendAudio(t,r)}_cancelResponse(){u(this,dt)&&(this.sendEvent({type:"response.cancel"}),y(this,dt,!1))}_interrupt(t){this.emit("audio_interrupted"),this.sendEvent({type:"conversation.item.truncate",item_id:u(this,Me),content_index:u(this,ct),audio_end_ms:t})}interrupt(){if(!u(this,Me)||typeof this._firstAudioTimestamp!="number")return;this._cancelResponse();const t=Date.now()-this._firstAudioTimestamp;t>=0&&t<this._audioLengthMs&&this._interrupt(t),y(this,Me,void 0),this._firstAudioTimestamp=void 0,this._audioLengthMs=0,y(this,ct,void 0)}}ut=new WeakMap,kt=new WeakMap,ee=new WeakMap,un=new WeakMap,Me=new WeakMap,ct=new WeakMap,dt=new WeakMap,Un=new WeakSet,xa=function(t,r,s){if(u(this,ee).websocket){t();return}if(!u(this,ut))throw new K("API key is not set. Please call `connect()` with an API key first.");if(!u(this,ut).startsWith("ek_")&&!u(this,un))throw new K("Using the WebSocket connection in a browser environment requires an ephemeral client key. If you have to use a regular API key, set the `useInsecureApiKey` option to true.");const a=["realtime","openai-insecure-api-key."+u(this,ut),"openai-beta.realtime-v1",Ea],i=new yc(u(this,kt),a);y(this,ee,{status:"connecting",websocket:i}),this.emit("connection_change",u(this,ee).status),i.addEventListener("open",()=>{y(this,ee,{status:"connected",websocket:i}),this.emit("connection_change",u(this,ee).status),this._onOpen(),t()}),i.addEventListener("error",o=>{this._onError(o),y(this,ee,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ee).status),r(o)}),i.addEventListener("message",o=>{this._onMessage(o);const{data:c,isGeneric:p}=Tr(o);if(!(!c||p))if(c.type==="response.audio.delta"){y(this,ct,c.content_index),y(this,Me,c.item_id),this._firstAudioTimestamp===void 0&&(this._firstAudioTimestamp=Date.now(),this._audioLengthMs=0);const l=X(c.delta);this._audioLengthMs+=l.byteLength/24/2;const f={type:"audio",data:l,responseId:c.response_id};this._onAudio(f)}else c.type==="input_audio_buffer.speech_started"?this.interrupt():c.type==="response.created"?y(this,dt,!0):c.type==="response.done"?y(this,dt,!1):c.type==="session.created"&&(this._tracingConfig=c.session.tracing,this._updateTracingConfig(s.tracing??"auto"))}),i.addEventListener("close",()=>{y(this,ee,{status:"disconnected",websocket:void 0}),this.emit("connection_change",u(this,ee).status),this._onClose()})};class vc extends On{constructor(t,r={}){super();k(this,W);_(this,"initialAgent");_(this,"options");k(this,B);k(this,Z);k(this,cn,[]);k(this,M);k(this,It,[]);k(this,At);k(this,dn,{});k(this,Y,[]);k(this,ln);k(this,Ct,{});this.initialAgent=t,this.options=r,typeof r.transport>"u"&&Aa()||r.transport==="webrtc"?y(this,B,new ma):r.transport==="websocket"||typeof r.transport>"u"?y(this,B,new ga):y(this,B,r.transport),y(this,Z,t),y(this,M,new mt({...r.context??{},history:u(this,Y)})),y(this,It,(r.outputGuardrails??[]).map(Su)),y(this,At,xu(r.outputGuardrailSettings??{})),y(this,ln,r.historyStoreAudio??!1)}get transport(){return u(this,B)}get currentAgent(){return u(this,Z)}get usage(){return u(this,M).usage}get context(){return u(this,M)}get muted(){return u(this,B).muted}get history(){return u(this,Y)}async updateAgent(t){return u(this,Z).emit("agent_handoff",u(this,M),t),this.emit("agent_handoff",u(this,M),u(this,Z),t),await F(this,W,Jn).call(this,t),await u(this,B).updateSessionConfig(await F(this,W,Bn).call(this)),t}async connect(t){await F(this,W,Jn).call(this,this.initialAgent),F(this,W,ka).call(this),await u(this,B).connect({apiKey:t.apiKey??this.options.apiKey,model:this.options.model,initialSessionConfig:await F(this,W,Bn).call(this,this.options.config)}),y(this,Y,[]),this.emit("history_updated",u(this,Y))}updateHistory(t){let r;typeof t=="function"?r=t(u(this,Y)):r=t,u(this,B).resetHistory(u(this,Y),r)}sendMessage(t,r={}){u(this,B).sendMessage(t,r)}mute(t){u(this,B).mute(t)}close(){y(this,Ct,{}),u(this,B).close()}sendAudio(t,r={}){u(this,B).sendAudio(t,r)}interrupt(){u(this,B).interrupt()}async approve(t,r={alwaysApprove:!1}){u(this,M).approveTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await F(this,W,qn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}async reject(t,r={alwaysReject:!1}){u(this,M).rejectTool(t,r);const s=u(this,Z).tools.find(a=>a.name===t.rawItem.name);if(s&&s.type==="function"&&t.rawItem.type==="function_call")await F(this,W,qn).call(this,t.rawItem,s);else throw new de(`Tool ${t.rawItem.name} not found`)}}B=new WeakMap,Z=new WeakMap,cn=new WeakMap,M=new WeakMap,It=new WeakMap,At=new WeakMap,dn=new WeakMap,Y=new WeakMap,ln=new WeakMap,Ct=new WeakMap,W=new WeakSet,Jn=async function(t){y(this,Z,t);const s=u(this,Z).handoffs.map(Rn).map(a=>a.getHandoffAsFunctionTool());y(this,cn,[...(await u(this,Z).getAllTools()).filter(a=>a.type==="function"),...s])},Bn=async function(t={}){const r=await u(this,Z).getSystemPrompt(u(this,M)),s=this.options.tracingDisabled?null:this.options.workflowName?{workflow_name:this.options.workflowName}:"auto";return s!==null&&s!=="auto"?(this.options.groupId&&(s.group_id=this.options.groupId),this.options.traceMetadata&&(s.metadata=this.options.traceMetadata)):(this.options.groupId||this.options.traceMetadata)&&Re.warn("In order to set traceMetadata or a groupId you need to specify a workflowName."),{instructions:r,voice:u(this,Z).voice,model:this.options.model,tools:u(this,cn),tracing:s,...t}},Sa=async function(t,r){const s=await r.onInvokeHandoff(u(this,M),t.arguments);u(this,Z).emit("agent_handoff",u(this,M),s),this.emit("agent_handoff",u(this,M),u(this,Z),s),await F(this,W,Jn).call(this,s),await u(this,B).updateSessionConfig(await F(this,W,Bn).call(this));const a=Ns(s);return u(this,B).sendFunctionCallOutput(t,a,!0),s},qn=async function(t,r){u(this,M).context.history=JSON.parse(JSON.stringify(u(this,Y)));let s=t.arguments;if(r.parameters&&(ze(r.parameters)?s=r.parameters.parse(s):s=JSON.parse(s)),await r.needsApproval(u(this,M),s,t.callId)){const c=this.context.isToolApproved({toolName:r.name,callId:t.callId});if(c===!1){this.emit("agent_tool_start",u(this,M),u(this,Z),r),u(this,Z).emit("agent_tool_start",u(this,M),r);const p="Tool execution was not approved.";u(this,B).sendFunctionCallOutput(t,p,!0),this.emit("agent_tool_end",u(this,M),u(this,Z),r,p),u(this,Z).emit("agent_tool_end",u(this,M),r,p);return}else if(typeof c>"u"){this.emit("tool_approval_requested",u(this,M),u(this,Z),{type:"function_approval",tool:r,approvalItem:new Ie(t,u(this,Z))});return}}this.emit("agent_tool_start",u(this,M),u(this,Z),r),u(this,Z).emit("agent_tool_start",u(this,M),r),u(this,M).context.history=JSON.parse(JSON.stringify(u(this,Y)));const i=await r.invoke(u(this,M),t.arguments),o=We(i);u(this,B).sendFunctionCallOutput(t,o,!0),this.emit("agent_tool_end",u(this,M),u(this,Z),r,o),u(this,Z).emit("agent_tool_end",u(this,M),r,o)},Ta=async function(t){const r=new Map(u(this,Z).handoffs.map(Rn).map(i=>[i.toolName,i])),s=new Map((await u(this,Z).getAllTools()).map(i=>[i.name,i])),a=r.get(t.name);if(a)await F(this,W,Sa).call(this,t,a);else{const i=s.get(t.name);if(i&&i.type==="function")await F(this,W,qn).call(this,t,i);else throw new de(`Tool ${t.name} not found`)}},Mr=async function(t,r){if(u(this,It).length===0)return;const s={agent:u(this,Z),agentOutput:t,context:u(this,M)},i=(await Promise.all(u(this,It).map(o=>o.run(s)))).find(o=>o.output.tripwireTriggered);if(i){if(u(this,Ct)[r])return;u(this,Ct)[r]=!0;const o=new hn(`Output guardrail triggered: ${JSON.stringify(i.output.outputInfo)}`,i);this.emit("guardrail_tripped",u(this,M),u(this,Z),o),this.interrupt();const c=Tu(i);this.sendMessage(c);return}},ka=function(){u(this,B).on("*",s=>{this.emit("transport_event",s)}),u(this,B).on("audio",s=>{this.emit("audio",s)}),u(this,B).on("turn_started",()=>{this.emit("agent_start",u(this,M),u(this,Z)),u(this,Z).emit("agent_start",u(this,M),u(this,Z))}),u(this,B).on("turn_done",s=>{const a=s.response.output[s.response.output.length-1],i=Zr(a)??"";this.emit("agent_end",u(this,M),u(this,Z),i),u(this,Z).emit("agent_end",u(this,M),i),F(this,W,Mr).call(this,i,s.response.id)}),u(this,B).on("audio_done",()=>{this.emit("audio_stopped",u(this,M),u(this,Z))});let t=0,r;u(this,B).on("audio_transcript_delta",s=>{try{const a=s.delta,i=s.itemId,o=s.responseId;r!==i&&(r=i,t=0);const p=(u(this,dn)[i]??"")+a;if(u(this,dn)[i]=p,u(this,At).debounceTextLength<0)return;const l=Math.floor(p.length/u(this,At).debounceTextLength);l>t&&(t=l,F(this,W,Mr).call(this,p,o))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("item_update",s=>{try{const a=!u(this,Y).some(i=>i.itemId===s.itemId);if(y(this,Y,Ca(u(this,Y),s,u(this,ln))),u(this,M).context.history=u(this,Y),a){const i=u(this,Y).find(o=>o.itemId===s.itemId);i&&this.emit("history_added",i)}this.emit("history_updated",u(this,Y))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("item_deleted",s=>{try{y(this,Y,u(this,Y).filter(a=>a.itemId!==s.itemId)),u(this,M).context.history=u(this,Y),this.emit("history_updated",u(this,Y))}catch(a){this.emit("error",{type:"error",error:a})}}),u(this,B).on("function_call",async s=>{try{await F(this,W,Ta).call(this,s)}catch(a){Re.error("Error handling function call",a),this.emit("error",{type:"error",error:a})}}),u(this,B).on("usage_update",s=>{u(this,M).usage.add(s)}),u(this,B).on("audio_interrupted",()=>{this.emit("audio_interrupted",u(this,M),u(this,Z))}),u(this,B).on("error",s=>{this.emit("error",s)})};const wc={base64ToArrayBuffer:X,arrayBufferToBase64:Et,getLastTextFromAudioOutputMessage:Zr};P.DEFAULT_OPENAI_REALTIME_MODEL=ha,P.DEFAULT_OPENAI_REALTIME_SESSION_CONFIG=De,P.ModelBehaviorError=de,P.OpenAIRealtimeBase=kr,P.OpenAIRealtimeWebRTC=ma,P.OpenAIRealtimeWebSocket=ga,P.OutputGuardrailTripwireTriggered=hn,P.RealtimeAgent=bu,P.RealtimeSession=vc,P.UserError=K,P.tool=_n,P.utils=wc,Object.defineProperty(P,Symbol.toStringTag,{value:"Module"})});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
